//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		docs.oasis-open.org/election/external/xAL.xsd
package gopkg_DocsOasisOpenOrgElectionExternalXalXsd

//	xAL: eXtensible Address Language
//	This is an XML document type definition (DTD) for
//	defining addresses.
//	Original Date of Creation: 1 March 2001
//	Copyright(c) 2000, OASIS. All Rights Reserved [http://www.oasis-open.org]
//	Contact: Customer Information Quality Technical Committee, OASIS
//	http://www.oasis-open.org/committees/ciq
//	VERSION: 2.0 [MAJOR RELEASE] Date of Creation: 01 May 2002
//	Last Update: 24 July 2002
//	Previous Version: 1.3
//	Common Attributes:Type - If not documented then it means, possible values of Type not limited to: Official, Unique, Abbreviation, OldName, Synonym
//	Code:Address element codes are used by groups like postal groups like ECCMA, ADIS, UN/PROLIST for postal services
import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdGoPkgHasCdata struct { CombinedCharDatas string `xml:",chardata"` }

//	Used by postal services to encode the name of the element.
type XsdGoPkgHasAttr_Code_XsdtString_ struct {
//	Used by postal services to encode the name of the element.
	Code xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Code,attr"`
}

type XsdGoPkgHasAtts_GrPostal struct {
//	Used by postal services to encode the name of the element.
	XsdGoPkgHasAttr_Code_XsdtString_
}

//	Type of address. Example: Postal, residential,business, primary, secondary, etc
type XsdGoPkgHasAttr_AddressType_XsdtString_ struct {
//	Type of address. Example: Postal, residential,business, primary, secondary, etc
	AddressType xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressType,attr"`
}

//	Moved, Living, Investment, Deceased, etc..
type XsdGoPkgHasAttr_CurrentStatus_XsdtString_ struct {
//	Moved, Living, Investment, Deceased, etc..
	CurrentStatus xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 CurrentStatus,attr"`
}

//	Start Date of the validity of address
type XsdGoPkgHasAttr_ValidFromDate_XsdtString_ struct {
//	Start Date of the validity of address
	ValidFromDate xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ValidFromDate,attr"`
}

//	End date of the validity of address
type XsdGoPkgHasAttr_ValidToDate_XsdtString_ struct {
//	End date of the validity of address
	ValidToDate xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ValidToDate,attr"`
}

//	Communication, Contact, etc.
type XsdGoPkgHasAttr_Usage_XsdtString_ struct {
//	Communication, Contact, etc.
	Usage xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Usage,attr"`
}

//	Key identifier for the element for not reinforced references from other elements. Not required to be unique for the document to be valid, but application may get confused if not unique. Extend this schema adding unique contraint if needed.
type XsdGoPkgHasAttr_AddressDetailsKey_XsdtString_ struct {
//	Key identifier for the element for not reinforced references from other elements. Not required to be unique for the document to be valid, but application may get confused if not unique. Extend this schema adding unique contraint if needed.
	AddressDetailsKey xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressDetailsKey,attr"`
}

//	Postal, residential, corporate, etc
type XsdGoPkgHasAttr_Type_XsdtString_ struct {
//	Postal, residential, corporate, etc
	Type xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Type,attr"`
}

type TxsdAddressDetailsSequenceChoiceAddress struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	Postal, residential, corporate, etc
	XsdGoPkgHasAttr_Type_XsdtString_

}

//	Address as one line of free text
type XsdGoPkgHasElem_Address_TxsdAddressDetailsSequenceChoiceAddress_ struct {
//	Address as one line of free text
	Address *TxsdAddressDetailsSequenceChoiceAddress `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Address"`
}

//	Address as one line of free text
type XsdGoPkgHasElems_Address_TxsdAddressDetailsSequenceChoiceAddress_ struct {
//	Address as one line of free text
	Addresses []*TxsdAddressDetailsSequenceChoiceAddress `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Address"`
}

//	Container for Address lines
type XsdGoPkgHasElem_AddressLines_TAddressLinesType_ struct {
//	Container for Address lines
	AddressLines *TAddressLinesType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLines"`
}

//	Container for Address lines
type XsdGoPkgHasElems_AddressLines_TAddressLinesType_ struct {
//	Container for Address lines
	AddressLineses []*TAddressLinesType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLines"`
}

//	Country code scheme possible values, but not limited to: iso.3166-2, iso.3166-3 for two and three character country codes.
type XsdGoPkgHasAttr_Scheme_XsdtString_ struct {
//	Country code scheme possible values, but not limited to: iso.3166-2, iso.3166-3 for two and three character country codes.
	Scheme xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Scheme,attr"`
}

type TxsdAddressDetailsSequenceChoiceCountrySequenceCountryNameCode struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	Country code scheme possible values, but not limited to: iso.3166-2, iso.3166-3 for two and three character country codes.
	XsdGoPkgHasAttr_Scheme_XsdtString_

}

//	A country code according to the specified scheme
type XsdGoPkgHasElem_CountryNameCode_TxsdAddressDetailsSequenceChoiceCountrySequenceCountryNameCode_ struct {
//	A country code according to the specified scheme
	CountryNameCode *TxsdAddressDetailsSequenceChoiceCountrySequenceCountryNameCode `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 CountryNameCode"`
}

//	A country code according to the specified scheme
type XsdGoPkgHasElems_CountryNameCode_TxsdAddressDetailsSequenceChoiceCountrySequenceCountryNameCode_ struct {
//	A country code according to the specified scheme
	CountryNameCodes []*TxsdAddressDetailsSequenceChoiceCountrySequenceCountryNameCode `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 CountryNameCode"`
}

type TxsdAddressDetailsSequenceChoiceCountry struct {
	XsdGoPkgHasElems_AdministrativeArea

	XsdGoPkgHasElems_Locality

	XsdGoPkgHasElems_Thoroughfare

	XsdGoPkgHasElems_AddressLine

//	A country code according to the specified scheme
	XsdGoPkgHasElems_CountryNameCode_TxsdAddressDetailsSequenceChoiceCountrySequenceCountryNameCode_

	XsdGoPkgHasElems_CountryName

}

//	Specification of a country
type XsdGoPkgHasElem_Country_TxsdAddressDetailsSequenceChoiceCountry_ struct {
//	Specification of a country
	Country *TxsdAddressDetailsSequenceChoiceCountry `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Country"`
}

//	Specification of a country
type XsdGoPkgHasElems_Country_TxsdAddressDetailsSequenceChoiceCountry_ struct {
//	Specification of a country
	Countries []*TxsdAddressDetailsSequenceChoiceCountry `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Country"`
}

//	Type of identifier. eg. DPID as in Australia
type XsdGoPkgHasAttr_IdentifierType_XsdtString_ struct {
//	Type of identifier. eg. DPID as in Australia
	IdentifierType xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 IdentifierType,attr"`
}

type TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressIdentifier struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	Type of identifier. eg. DPID as in Australia
	XsdGoPkgHasAttr_IdentifierType_XsdtString_

}

//	A unique identifier of an address assigned by postal authorities. Example: DPID in Australia
type XsdGoPkgHasElems_AddressIdentifier_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressIdentifier_ struct {
//	A unique identifier of an address assigned by postal authorities. Example: DPID in Australia
	AddressIdentifiers []*TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressIdentifier `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressIdentifier"`
}

//	A unique identifier of an address assigned by postal authorities. Example: DPID in Australia
type XsdGoPkgHasElem_AddressIdentifier_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressIdentifier_ struct {
//	A unique identifier of an address assigned by postal authorities. Example: DPID in Australia
	AddressIdentifier *TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressIdentifier `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressIdentifier"`
}

type TxsdAddressDetailsSequencePostalServiceElementsSequenceEndorsementLineCode struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Directly affects postal service distribution
type XsdGoPkgHasElem_EndorsementLineCode_TxsdAddressDetailsSequencePostalServiceElementsSequenceEndorsementLineCode_ struct {
//	Directly affects postal service distribution
	EndorsementLineCode *TxsdAddressDetailsSequencePostalServiceElementsSequenceEndorsementLineCode `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 EndorsementLineCode"`
}

//	Directly affects postal service distribution
type XsdGoPkgHasElems_EndorsementLineCode_TxsdAddressDetailsSequencePostalServiceElementsSequenceEndorsementLineCode_ struct {
//	Directly affects postal service distribution
	EndorsementLineCodes []*TxsdAddressDetailsSequencePostalServiceElementsSequenceEndorsementLineCode `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 EndorsementLineCode"`
}

type TxsdAddressDetailsSequencePostalServiceElementsSequenceKeyLineCode struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Required for some postal services
type XsdGoPkgHasElems_KeyLineCode_TxsdAddressDetailsSequencePostalServiceElementsSequenceKeyLineCode_ struct {
//	Required for some postal services
	KeyLineCodes []*TxsdAddressDetailsSequencePostalServiceElementsSequenceKeyLineCode `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 KeyLineCode"`
}

//	Required for some postal services
type XsdGoPkgHasElem_KeyLineCode_TxsdAddressDetailsSequencePostalServiceElementsSequenceKeyLineCode_ struct {
//	Required for some postal services
	KeyLineCode *TxsdAddressDetailsSequencePostalServiceElementsSequenceKeyLineCode `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 KeyLineCode"`
}

type TxsdAddressDetailsSequencePostalServiceElementsSequenceBarcode struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Required for some postal services
type XsdGoPkgHasElems_Barcode_TxsdAddressDetailsSequencePostalServiceElementsSequenceBarcode_ struct {
//	Required for some postal services
	Barcodes []*TxsdAddressDetailsSequencePostalServiceElementsSequenceBarcode `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Barcode"`
}

//	Required for some postal services
type XsdGoPkgHasElem_Barcode_TxsdAddressDetailsSequencePostalServiceElementsSequenceBarcode_ struct {
//	Required for some postal services
	Barcode *TxsdAddressDetailsSequencePostalServiceElementsSequenceBarcode `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Barcode"`
}

type TxsdAddressDetailsSequencePostalServiceElementsSequenceSortingCode struct {
	XsdGoPkgHasAtts_GrPostal

}

//	Used for sorting addresses. Values may for example be CEDEX 16 (France)
type XsdGoPkgHasElems_SortingCode_TxsdAddressDetailsSequencePostalServiceElementsSequenceSortingCode_ struct {
//	Used for sorting addresses. Values may for example be CEDEX 16 (France)
	SortingCodes []*TxsdAddressDetailsSequencePostalServiceElementsSequenceSortingCode `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SortingCode"`
}

//	Used for sorting addresses. Values may for example be CEDEX 16 (France)
type XsdGoPkgHasElem_SortingCode_TxsdAddressDetailsSequencePostalServiceElementsSequenceSortingCode_ struct {
//	Used for sorting addresses. Values may for example be CEDEX 16 (France)
	SortingCode *TxsdAddressDetailsSequencePostalServiceElementsSequenceSortingCode `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SortingCode"`
}

type TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLatitude struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Latitude of delivery address
type XsdGoPkgHasElems_AddressLatitude_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLatitude_ struct {
//	Latitude of delivery address
	AddressLatitudes []*TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLatitude `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLatitude"`
}

//	Latitude of delivery address
type XsdGoPkgHasElem_AddressLatitude_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLatitude_ struct {
//	Latitude of delivery address
	AddressLatitude *TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLatitude `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLatitude"`
}

//	Specific to postal service
type TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLatitudeDirection struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Latitude direction of delivery address;N = North and S = South
type XsdGoPkgHasElems_AddressLatitudeDirection_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLatitudeDirection_ struct {
//	Latitude direction of delivery address;N = North and S = South
	AddressLatitudeDirections []*TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLatitudeDirection `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLatitudeDirection"`
}

//	Latitude direction of delivery address;N = North and S = South
type XsdGoPkgHasElem_AddressLatitudeDirection_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLatitudeDirection_ struct {
//	Latitude direction of delivery address;N = North and S = South
	AddressLatitudeDirection *TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLatitudeDirection `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLatitudeDirection"`
}

type TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLongitude struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Longtitude of delivery address
type XsdGoPkgHasElem_AddressLongitude_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLongitude_ struct {
//	Longtitude of delivery address
	AddressLongitude *TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLongitude `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLongitude"`
}

//	Longtitude of delivery address
type XsdGoPkgHasElems_AddressLongitude_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLongitude_ struct {
//	Longtitude of delivery address
	AddressLongitudes []*TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLongitude `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLongitude"`
}

type TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLongitudeDirection struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Longtitude direction of delivery address;N=North and S=South
type XsdGoPkgHasElems_AddressLongitudeDirection_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLongitudeDirection_ struct {
//	Longtitude direction of delivery address;N=North and S=South
	AddressLongitudeDirections []*TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLongitudeDirection `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLongitudeDirection"`
}

//	Longtitude direction of delivery address;N=North and S=South
type XsdGoPkgHasElem_AddressLongitudeDirection_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLongitudeDirection_ struct {
//	Longtitude direction of delivery address;N=North and S=South
	AddressLongitudeDirection *TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLongitudeDirection `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLongitudeDirection"`
}

type TxsdAddressDetailsSequencePostalServiceElementsSequenceSupplementaryPostalServiceData struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	any postal service elements not covered by the container can be represented using this element
type XsdGoPkgHasElems_SupplementaryPostalServiceData_TxsdAddressDetailsSequencePostalServiceElementsSequenceSupplementaryPostalServiceData_ struct {
//	any postal service elements not covered by the container can be represented using this element
	SupplementaryPostalServiceDatas []*TxsdAddressDetailsSequencePostalServiceElementsSequenceSupplementaryPostalServiceData `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SupplementaryPostalServiceData"`
}

//	any postal service elements not covered by the container can be represented using this element
type XsdGoPkgHasElem_SupplementaryPostalServiceData_TxsdAddressDetailsSequencePostalServiceElementsSequenceSupplementaryPostalServiceData_ struct {
//	any postal service elements not covered by the container can be represented using this element
	SupplementaryPostalServiceData *TxsdAddressDetailsSequencePostalServiceElementsSequenceSupplementaryPostalServiceData `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SupplementaryPostalServiceData"`
}

type TxsdAddressDetailsSequencePostalServiceElements struct {
//	A unique identifier of an address assigned by postal authorities. Example: DPID in Australia
	XsdGoPkgHasElems_AddressIdentifier_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressIdentifier_

//	Directly affects postal service distribution
	XsdGoPkgHasElems_EndorsementLineCode_TxsdAddressDetailsSequencePostalServiceElementsSequenceEndorsementLineCode_

//	Required for some postal services
	XsdGoPkgHasElems_KeyLineCode_TxsdAddressDetailsSequencePostalServiceElementsSequenceKeyLineCode_

//	Required for some postal services
	XsdGoPkgHasElems_Barcode_TxsdAddressDetailsSequencePostalServiceElementsSequenceBarcode_

//	Used for sorting addresses. Values may for example be CEDEX 16 (France)
	XsdGoPkgHasElems_SortingCode_TxsdAddressDetailsSequencePostalServiceElementsSequenceSortingCode_

//	Latitude of delivery address
	XsdGoPkgHasElems_AddressLatitude_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLatitude_

//	Latitude direction of delivery address;N = North and S = South
	XsdGoPkgHasElems_AddressLatitudeDirection_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLatitudeDirection_

//	Longtitude of delivery address
	XsdGoPkgHasElems_AddressLongitude_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLongitude_

//	Longtitude direction of delivery address;N=North and S=South
	XsdGoPkgHasElems_AddressLongitudeDirection_TxsdAddressDetailsSequencePostalServiceElementsSequenceAddressLongitudeDirection_

//	any postal service elements not covered by the container can be represented using this element
	XsdGoPkgHasElems_SupplementaryPostalServiceData_TxsdAddressDetailsSequencePostalServiceElementsSequenceSupplementaryPostalServiceData_

}

//	Postal authorities use specific postal service data to expedient delivery of mail
type XsdGoPkgHasElem_PostalServiceElements_TxsdAddressDetailsSequencePostalServiceElements_ struct {
//	Postal authorities use specific postal service data to expedient delivery of mail
	PostalServiceElements *TxsdAddressDetailsSequencePostalServiceElements `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalServiceElements"`
}

//	Postal authorities use specific postal service data to expedient delivery of mail
type XsdGoPkgHasElems_PostalServiceElements_TxsdAddressDetailsSequencePostalServiceElements_ struct {
//	Postal authorities use specific postal service data to expedient delivery of mail
	PostalServiceElementses []*TxsdAddressDetailsSequencePostalServiceElements `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalServiceElements"`
}

type TAddressDetails struct {
//	Use the most suitable option. Country contains the most detailed information while Locality is missing Country and AdminArea
//	Address as one line of free text
	XsdGoPkgHasElems_Address_TxsdAddressDetailsSequenceChoiceAddress_

//	Container for Address lines
	XsdGoPkgHasElems_AddressLines_TAddressLinesType_

//	Specification of a country
	XsdGoPkgHasElems_Country_TxsdAddressDetailsSequenceChoiceCountry_

	XsdGoPkgHasElems_AdministrativeArea

	XsdGoPkgHasElems_Locality

	XsdGoPkgHasElems_Thoroughfare

//	Postal authorities use specific postal service data to expedient delivery of mail
	XsdGoPkgHasElems_PostalServiceElements_TxsdAddressDetailsSequencePostalServiceElements_

	XsdGoPkgHasAtts_GrPostal

//	End date of the validity of address
	XsdGoPkgHasAttr_ValidToDate_XsdtString_

//	Key identifier for the element for not reinforced references from other elements. Not required to be unique for the document to be valid, but application may get confused if not unique. Extend this schema adding unique contraint if needed.
	XsdGoPkgHasAttr_AddressDetailsKey_XsdtString_

//	Moved, Living, Investment, Deceased, etc..
	XsdGoPkgHasAttr_CurrentStatus_XsdtString_

//	Type of address. Example: Postal, residential,business, primary, secondary, etc
	XsdGoPkgHasAttr_AddressType_XsdtString_

//	Communication, Contact, etc.
	XsdGoPkgHasAttr_Usage_XsdtString_

//	Start Date of the validity of address
	XsdGoPkgHasAttr_ValidFromDate_XsdtString_

}

type TAddressLinesType struct {
	XsdGoPkgHasElems_AddressLine

}

type TxsdBuildingNameTypeTypeOccurrence xsdt.Nmtoken

//	Since TxsdBuildingNameTypeTypeOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdBuildingNameTypeTypeOccurrence) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdBuildingNameTypeTypeOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdBuildingNameTypeTypeOccurrence) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdBuildingNameTypeTypeOccurrence's alias type xsdt.Nmtoken
func (me TxsdBuildingNameTypeTypeOccurrence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdBuildingNameTypeTypeOccurrence is "Before".
func (me TxsdBuildingNameTypeTypeOccurrence) IsBefore () bool { return me == "Before" }

//	Returns true if the value of this enumerated TxsdBuildingNameTypeTypeOccurrence is "After".
func (me TxsdBuildingNameTypeTypeOccurrence) IsAfter () bool { return me == "After" }

//	Occurrence of the building name before/after the type. eg. EGIS BUILDING where name appears before type
type XsdGoPkgHasAttr_TypeOccurrence_TxsdBuildingNameTypeTypeOccurrence_ struct {
//	Occurrence of the building name before/after the type. eg. EGIS BUILDING where name appears before type
	TypeOccurrence TxsdBuildingNameTypeTypeOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 TypeOccurrence,attr"`
}

type TBuildingNameType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	Occurrence of the building name before/after the type. eg. EGIS BUILDING where name appears before type
	XsdGoPkgHasAttr_TypeOccurrence_TxsdBuildingNameTypeTypeOccurrence_

}

//	Postal or Political - Sometimes locations must be distinguished between postal system, and physical locations as defined by a political system
type XsdGoPkgHasAttr_UsageType_XsdtString_ struct {
//	Postal or Political - Sometimes locations must be distinguished between postal system, and physical locations as defined by a political system
	UsageType xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 UsageType,attr"`
}

//	"VIA" as in Hill Top VIA Parish where Parish is a locality and Hill Top is a dependent locality
type XsdGoPkgHasAttr_Connector_XsdtString_ struct {
//	"VIA" as in Hill Top VIA Parish where Parish is a locality and Hill Top is a dependent locality
	Connector xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Connector,attr"`
}

//	Eg. Erode (Dist) where (Dist) is the Indicator
type XsdGoPkgHasAttr_Indicator_XsdtString_ struct {
//	Eg. Erode (Dist) where (Dist) is the Indicator
	Indicator xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Indicator,attr"`
}

//	Specification of a large mail user address. Examples of large mail users are postal companies, companies in France with a cedex number, hospitals and airports with their own post code. Large mail user addresses do not have a street name with premise name or premise number in countries like Netherlands. But they have a POBox and street also in countries like France
type XsdGoPkgHasElems_LargeMailUser_TLargeMailUserType_ struct {
//	Specification of a large mail user address. Examples of large mail users are postal companies, companies in France with a cedex number, hospitals and airports with their own post code. Large mail user addresses do not have a street name with premise name or premise number in countries like Netherlands. But they have a POBox and street also in countries like France
	LargeMailUsers []*TLargeMailUserType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 LargeMailUser"`
}

//	Specification of a large mail user address. Examples of large mail users are postal companies, companies in France with a cedex number, hospitals and airports with their own post code. Large mail user addresses do not have a street name with premise name or premise number in countries like Netherlands. But they have a POBox and street also in countries like France
type XsdGoPkgHasElem_LargeMailUser_TLargeMailUserType_ struct {
//	Specification of a large mail user address. Examples of large mail users are postal companies, companies in France with a cedex number, hospitals and airports with their own post code. Large mail user addresses do not have a street name with premise name or premise number in countries like Netherlands. But they have a POBox and street also in countries like France
	LargeMailUser *TLargeMailUserType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 LargeMailUser"`
}

//	A Postal van is specific for a route as in Is`rael, Rural route
type XsdGoPkgHasElems_PostalRoute_TPostalRouteType_ struct {
//	A Postal van is specific for a route as in Is`rael, Rural route
	PostalRoutes []*TPostalRouteType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalRoute"`
}

//	A Postal van is specific for a route as in Is`rael, Rural route
type XsdGoPkgHasElem_PostalRoute_TPostalRouteType_ struct {
//	A Postal van is specific for a route as in Is`rael, Rural route
	PostalRoute *TPostalRouteType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalRoute"`
}

type TxsdDependentLocalityTypeSequenceDependentLocalityName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Name of the dependent locality
type XsdGoPkgHasElems_DependentLocalityName_TxsdDependentLocalityTypeSequenceDependentLocalityName_ struct {
//	Name of the dependent locality
	DependentLocalityNames []*TxsdDependentLocalityTypeSequenceDependentLocalityName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentLocalityName"`
}

//	Name of the dependent locality
type XsdGoPkgHasElem_DependentLocalityName_TxsdDependentLocalityTypeSequenceDependentLocalityName_ struct {
//	Name of the dependent locality
	DependentLocalityName *TxsdDependentLocalityTypeSequenceDependentLocalityName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentLocalityName"`
}

type TxsdDependentLocalityTypeSequenceDependentLocalityNumberNameNumberOccurrence xsdt.Nmtoken

//	Since TxsdDependentLocalityTypeSequenceDependentLocalityNumberNameNumberOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdDependentLocalityTypeSequenceDependentLocalityNumberNameNumberOccurrence) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdDependentLocalityTypeSequenceDependentLocalityNumberNameNumberOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdDependentLocalityTypeSequenceDependentLocalityNumberNameNumberOccurrence) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdDependentLocalityTypeSequenceDependentLocalityNumberNameNumberOccurrence's alias type xsdt.Nmtoken
func (me TxsdDependentLocalityTypeSequenceDependentLocalityNumberNameNumberOccurrence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdDependentLocalityTypeSequenceDependentLocalityNumberNameNumberOccurrence is "Before".
func (me TxsdDependentLocalityTypeSequenceDependentLocalityNumberNameNumberOccurrence) IsBefore () bool { return me == "Before" }

//	Returns true if the value of this enumerated TxsdDependentLocalityTypeSequenceDependentLocalityNumberNameNumberOccurrence is "After".
func (me TxsdDependentLocalityTypeSequenceDependentLocalityNumberNameNumberOccurrence) IsAfter () bool { return me == "After" }

//	Eg. SECTOR occurs before 5 in SECTOR 5
type XsdGoPkgHasAttr_NameNumberOccurrence_TxsdDependentLocalityTypeSequenceDependentLocalityNumberNameNumberOccurrence_ struct {
//	Eg. SECTOR occurs before 5 in SECTOR 5
	NameNumberOccurrence TxsdDependentLocalityTypeSequenceDependentLocalityNumberNameNumberOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NameNumberOccurrence,attr"`
}

type TxsdDependentLocalityTypeSequenceDependentLocalityNumber struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	Eg. SECTOR occurs before 5 in SECTOR 5
	XsdGoPkgHasAttr_NameNumberOccurrence_TxsdDependentLocalityTypeSequenceDependentLocalityNumberNameNumberOccurrence_

}

//	Number of the dependent locality. Some areas are numbered. Eg. SECTOR 5 in a Suburb as in India or SOI SUKUMVIT 10 as in Thailand
type XsdGoPkgHasElems_DependentLocalityNumber_TxsdDependentLocalityTypeSequenceDependentLocalityNumber_ struct {
//	Number of the dependent locality. Some areas are numbered. Eg. SECTOR 5 in a Suburb as in India or SOI SUKUMVIT 10 as in Thailand
	DependentLocalityNumbers []*TxsdDependentLocalityTypeSequenceDependentLocalityNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentLocalityNumber"`
}

//	Number of the dependent locality. Some areas are numbered. Eg. SECTOR 5 in a Suburb as in India or SOI SUKUMVIT 10 as in Thailand
type XsdGoPkgHasElem_DependentLocalityNumber_TxsdDependentLocalityTypeSequenceDependentLocalityNumber_ struct {
//	Number of the dependent locality. Some areas are numbered. Eg. SECTOR 5 in a Suburb as in India or SOI SUKUMVIT 10 as in Thailand
	DependentLocalityNumber *TxsdDependentLocalityTypeSequenceDependentLocalityNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentLocalityNumber"`
}

//	Dependent localities are Districts within cities/towns, locality divisions, postal
//	divisions of cities, suburbs, etc. DependentLocality is a recursive element, but no nesting deeper than two exists (Locality-DependentLocality-DependentLocality).
type XsdGoPkgHasElems_DependentLocality_TDependentLocalityType_ struct {
//	Dependent localities are Districts within cities/towns, locality divisions, postal
//	divisions of cities, suburbs, etc. DependentLocality is a recursive element, but no nesting deeper than two exists (Locality-DependentLocality-DependentLocality).
	DependentLocalities []*TDependentLocalityType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentLocality"`
}

//	Dependent localities are Districts within cities/towns, locality divisions, postal
//	divisions of cities, suburbs, etc. DependentLocality is a recursive element, but no nesting deeper than two exists (Locality-DependentLocality-DependentLocality).
type XsdGoPkgHasElem_DependentLocality_TDependentLocalityType_ struct {
//	Dependent localities are Districts within cities/towns, locality divisions, postal
//	divisions of cities, suburbs, etc. DependentLocality is a recursive element, but no nesting deeper than two exists (Locality-DependentLocality-DependentLocality).
	DependentLocality *TDependentLocalityType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentLocality"`
}

type TDependentLocalityType struct {
	XsdGoPkgHasElems_PostBox

//	Specification of a large mail user address. Examples of large mail users are postal companies, companies in France with a cedex number, hospitals and airports with their own post code. Large mail user addresses do not have a street name with premise name or premise number in countries like Netherlands. But they have a POBox and street also in countries like France
	XsdGoPkgHasElems_LargeMailUser_TLargeMailUserType_

	XsdGoPkgHasElems_PostOffice

//	A Postal van is specific for a route as in Is`rael, Rural route
	XsdGoPkgHasElems_PostalRoute_TPostalRouteType_

	XsdGoPkgHasElems_AddressLine

//	Name of the dependent locality
	XsdGoPkgHasElems_DependentLocalityName_TxsdDependentLocalityTypeSequenceDependentLocalityName_

//	Number of the dependent locality. Some areas are numbered. Eg. SECTOR 5 in a Suburb as in India or SOI SUKUMVIT 10 as in Thailand
	XsdGoPkgHasElems_DependentLocalityNumber_TxsdDependentLocalityTypeSequenceDependentLocalityNumber_

	XsdGoPkgHasElems_Thoroughfare

	XsdGoPkgHasElems_Premise

//	Dependent localities are Districts within cities/towns, locality divisions, postal
//	divisions of cities, suburbs, etc. DependentLocality is a recursive element, but no nesting deeper than two exists (Locality-DependentLocality-DependentLocality).
	XsdGoPkgHasElems_DependentLocality_TDependentLocalityType_

	XsdGoPkgHasElems_PostalCode

//	Postal or Political - Sometimes locations must be distinguished between postal system, and physical locations as defined by a political system
	XsdGoPkgHasAttr_UsageType_XsdtString_

//	"VIA" as in Hill Top VIA Parish where Parish is a locality and Hill Top is a dependent locality
	XsdGoPkgHasAttr_Connector_XsdtString_

//	Eg. Erode (Dist) where (Dist) is the Indicator
	XsdGoPkgHasAttr_Indicator_XsdtString_

}

type TxsdFirmTypeSequenceFirmName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Name of the firm
type XsdGoPkgHasElem_FirmName_TxsdFirmTypeSequenceFirmName_ struct {
//	Name of the firm
	FirmName *TxsdFirmTypeSequenceFirmName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 FirmName"`
}

//	Name of the firm
type XsdGoPkgHasElems_FirmName_TxsdFirmTypeSequenceFirmName_ struct {
//	Name of the firm
	FirmNames []*TxsdFirmTypeSequenceFirmName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 FirmName"`
}

//	A MailStop is where the the mail is delivered to within a premise/subpremise/firm or a facility.
type XsdGoPkgHasElem_MailStop_TMailStopType_ struct {
//	A MailStop is where the the mail is delivered to within a premise/subpremise/firm or a facility.
	MailStop *TMailStopType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 MailStop"`
}

//	A MailStop is where the the mail is delivered to within a premise/subpremise/firm or a facility.
type XsdGoPkgHasElems_MailStop_TMailStopType_ struct {
//	A MailStop is where the the mail is delivered to within a premise/subpremise/firm or a facility.
	MailStops []*TMailStopType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 MailStop"`
}

type TFirmType struct {
	XsdGoPkgHasElems_AddressLine

//	Name of the firm
	XsdGoPkgHasElems_FirmName_TxsdFirmTypeSequenceFirmName_

	XsdGoPkgHasElems_Department

//	A MailStop is where the the mail is delivered to within a premise/subpremise/firm or a facility.
	XsdGoPkgHasElems_MailStop_TMailStopType_

	XsdGoPkgHasElems_PostalCode

}

type TxsdLargeMailUserTypeSequenceLargeMailUserName struct {
	XsdGoPkgHasCdata

}

//	Name of the large mail user. eg. Smith Ford International airport
type XsdGoPkgHasElems_LargeMailUserName_TxsdLargeMailUserTypeSequenceLargeMailUserName_ struct {
//	Name of the large mail user. eg. Smith Ford International airport
	LargeMailUserNames []*TxsdLargeMailUserTypeSequenceLargeMailUserName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 LargeMailUserName"`
}

//	Name of the large mail user. eg. Smith Ford International airport
type XsdGoPkgHasElem_LargeMailUserName_TxsdLargeMailUserTypeSequenceLargeMailUserName_ struct {
//	Name of the large mail user. eg. Smith Ford International airport
	LargeMailUserName *TxsdLargeMailUserTypeSequenceLargeMailUserName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 LargeMailUserName"`
}

type TxsdLargeMailUserTypeSequenceLargeMailUserIdentifier struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Specification of the identification number of a large mail user. An example are the Cedex codes in France.
type XsdGoPkgHasElems_LargeMailUserIdentifier_TxsdLargeMailUserTypeSequenceLargeMailUserIdentifier_ struct {
//	Specification of the identification number of a large mail user. An example are the Cedex codes in France.
	LargeMailUserIdentifiers []*TxsdLargeMailUserTypeSequenceLargeMailUserIdentifier `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 LargeMailUserIdentifier"`
}

//	Specification of the identification number of a large mail user. An example are the Cedex codes in France.
type XsdGoPkgHasElem_LargeMailUserIdentifier_TxsdLargeMailUserTypeSequenceLargeMailUserIdentifier_ struct {
//	Specification of the identification number of a large mail user. An example are the Cedex codes in France.
	LargeMailUserIdentifier *TxsdLargeMailUserTypeSequenceLargeMailUserIdentifier `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 LargeMailUserIdentifier"`
}

//	Name of the building
type XsdGoPkgHasElem_BuildingName_TBuildingNameType_ struct {
//	Name of the building
	BuildingName *TBuildingNameType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 BuildingName"`
}

//	Name of the building
type XsdGoPkgHasElems_BuildingName_TBuildingNameType_ struct {
//	Name of the building
	BuildingNames []*TBuildingNameType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 BuildingName"`
}

type TLargeMailUserType struct {
	XsdGoPkgHasElems_AddressLine

//	Name of the large mail user. eg. Smith Ford International airport
	XsdGoPkgHasElems_LargeMailUserName_TxsdLargeMailUserTypeSequenceLargeMailUserName_

//	Specification of the identification number of a large mail user. An example are the Cedex codes in France.
	XsdGoPkgHasElems_LargeMailUserIdentifier_TxsdLargeMailUserTypeSequenceLargeMailUserIdentifier_

//	Name of the building
	XsdGoPkgHasElems_BuildingName_TBuildingNameType_

	XsdGoPkgHasElems_Department

	XsdGoPkgHasElems_PostBox

	XsdGoPkgHasElems_Thoroughfare

	XsdGoPkgHasElems_PostalCode

}

type TxsdMailStopTypeSequenceMailStopName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Name of the the Mail Stop. eg. MSP, MS, etc
type XsdGoPkgHasElems_MailStopName_TxsdMailStopTypeSequenceMailStopName_ struct {
//	Name of the the Mail Stop. eg. MSP, MS, etc
	MailStopNames []*TxsdMailStopTypeSequenceMailStopName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 MailStopName"`
}

//	Name of the the Mail Stop. eg. MSP, MS, etc
type XsdGoPkgHasElem_MailStopName_TxsdMailStopTypeSequenceMailStopName_ struct {
//	Name of the the Mail Stop. eg. MSP, MS, etc
	MailStopName *TxsdMailStopTypeSequenceMailStopName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 MailStopName"`
}

//	"-" in MS-123
type XsdGoPkgHasAttr_NameNumberSeparator_XsdtString_ struct {
//	"-" in MS-123
	NameNumberSeparator xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NameNumberSeparator,attr"`
}

type TxsdMailStopTypeSequenceMailStopNumber struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	"-" in MS-123
	XsdGoPkgHasAttr_NameNumberSeparator_XsdtString_

}

//	Number of the Mail stop. eg. 123 in MS 123
type XsdGoPkgHasElem_MailStopNumber_TxsdMailStopTypeSequenceMailStopNumber_ struct {
//	Number of the Mail stop. eg. 123 in MS 123
	MailStopNumber *TxsdMailStopTypeSequenceMailStopNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 MailStopNumber"`
}

//	Number of the Mail stop. eg. 123 in MS 123
type XsdGoPkgHasElems_MailStopNumber_TxsdMailStopTypeSequenceMailStopNumber_ struct {
//	Number of the Mail stop. eg. 123 in MS 123
	MailStopNumbers []*TxsdMailStopTypeSequenceMailStopNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 MailStopNumber"`
}

type TMailStopType struct {
	XsdGoPkgHasElems_AddressLine

//	Name of the the Mail Stop. eg. MSP, MS, etc
	XsdGoPkgHasElems_MailStopName_TxsdMailStopTypeSequenceMailStopName_

//	Number of the Mail stop. eg. 123 in MS 123
	XsdGoPkgHasElems_MailStopNumber_TxsdMailStopTypeSequenceMailStopNumber_

}

type TxsdPostalRouteTypeSequenceChoicePostalRouteName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Name of the Postal Route
type XsdGoPkgHasElem_PostalRouteName_TxsdPostalRouteTypeSequenceChoicePostalRouteName_ struct {
//	Name of the Postal Route
	PostalRouteName *TxsdPostalRouteTypeSequenceChoicePostalRouteName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalRouteName"`
}

//	Name of the Postal Route
type XsdGoPkgHasElems_PostalRouteName_TxsdPostalRouteTypeSequenceChoicePostalRouteName_ struct {
//	Name of the Postal Route
	PostalRouteNames []*TxsdPostalRouteTypeSequenceChoicePostalRouteName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalRouteName"`
}

type TxsdPostalRouteTypeSequenceChoicePostalRouteNumber struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Number of the Postal Route
type XsdGoPkgHasElems_PostalRouteNumber_TxsdPostalRouteTypeSequenceChoicePostalRouteNumber_ struct {
//	Number of the Postal Route
	PostalRouteNumbers []*TxsdPostalRouteTypeSequenceChoicePostalRouteNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalRouteNumber"`
}

//	Number of the Postal Route
type XsdGoPkgHasElem_PostalRouteNumber_TxsdPostalRouteTypeSequenceChoicePostalRouteNumber_ struct {
//	Number of the Postal Route
	PostalRouteNumber *TxsdPostalRouteTypeSequenceChoicePostalRouteNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalRouteNumber"`
}

type TPostalRouteType struct {
//	Name of the Postal Route
	XsdGoPkgHasElems_PostalRouteName_TxsdPostalRouteTypeSequenceChoicePostalRouteName_

//	Number of the Postal Route
	XsdGoPkgHasElems_PostalRouteNumber_TxsdPostalRouteTypeSequenceChoicePostalRouteNumber_

	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElems_PostBox

}

type TxsdSubPremiseTypeSequenceChoiceSubPremiseLocation struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Name of the SubPremise Location. eg. LOBBY, BASEMENT, GROUND FLOOR, etc...
type XsdGoPkgHasElem_SubPremiseLocation_TxsdSubPremiseTypeSequenceChoiceSubPremiseLocation_ struct {
//	Name of the SubPremise Location. eg. LOBBY, BASEMENT, GROUND FLOOR, etc...
	SubPremiseLocation *TxsdSubPremiseTypeSequenceChoiceSubPremiseLocation `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremiseLocation"`
}

//	Name of the SubPremise Location. eg. LOBBY, BASEMENT, GROUND FLOOR, etc...
type XsdGoPkgHasElems_SubPremiseLocation_TxsdSubPremiseTypeSequenceChoiceSubPremiseLocation_ struct {
//	Name of the SubPremise Location. eg. LOBBY, BASEMENT, GROUND FLOOR, etc...
	SubPremiseLocations []*TxsdSubPremiseTypeSequenceChoiceSubPremiseLocation `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremiseLocation"`
}

type TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberIndicatorOccurrence xsdt.Nmtoken

//	Since TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberIndicatorOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberIndicatorOccurrence) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberIndicatorOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberIndicatorOccurrence) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberIndicatorOccurrence's alias type xsdt.Nmtoken
func (me TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberIndicatorOccurrence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberIndicatorOccurrence is "Before".
func (me TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberIndicatorOccurrence) IsBefore () bool { return me == "Before" }

//	Returns true if the value of this enumerated TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberIndicatorOccurrence is "After".
func (me TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberIndicatorOccurrence) IsAfter () bool { return me == "After" }

//	"No." occurs before 1 in No.1, or TH occurs after 12 in 12TH
type XsdGoPkgHasAttr_IndicatorOccurrence_TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberIndicatorOccurrence_ struct {
//	"No." occurs before 1 in No.1, or TH occurs after 12 in 12TH
	IndicatorOccurrence TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 IndicatorOccurrence,attr"`
}

type TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberNumberTypeOccurrence xsdt.Nmtoken

//	Since TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberNumberTypeOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberNumberTypeOccurrence) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberNumberTypeOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberNumberTypeOccurrence) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberNumberTypeOccurrence's alias type xsdt.Nmtoken
func (me TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberNumberTypeOccurrence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberNumberTypeOccurrence is "Before".
func (me TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberNumberTypeOccurrence) IsBefore () bool { return me == "Before" }

//	Returns true if the value of this enumerated TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberNumberTypeOccurrence is "After".
func (me TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberNumberTypeOccurrence) IsAfter () bool { return me == "After" }

//	12TH occurs "before" FLOOR (a type of subpremise) in 12TH FLOOR
type XsdGoPkgHasAttr_NumberTypeOccurrence_TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberNumberTypeOccurrence_ struct {
//	12TH occurs "before" FLOOR (a type of subpremise) in 12TH FLOOR
	NumberTypeOccurrence TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberNumberTypeOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberTypeOccurrence,attr"`
}

//	"/" in 12/14 Archer Street where 12 is sub-premise number and 14 is premise number
type XsdGoPkgHasAttr_PremiseNumberSeparator_XsdtString_ struct {
//	"/" in 12/14 Archer Street where 12 is sub-premise number and 14 is premise number
	PremiseNumberSeparator xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberSeparator,attr"`
}

type TxsdSubPremiseTypeSequenceChoiceSubPremiseNumber struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	"No." occurs before 1 in No.1, or TH occurs after 12 in 12TH
	XsdGoPkgHasAttr_IndicatorOccurrence_TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberIndicatorOccurrence_

//	12TH occurs "before" FLOOR (a type of subpremise) in 12TH FLOOR
	XsdGoPkgHasAttr_NumberTypeOccurrence_TxsdSubPremiseTypeSequenceChoiceSubPremiseNumberNumberTypeOccurrence_

//	"/" in 12/14 Archer Street where 12 is sub-premise number and 14 is premise number
	XsdGoPkgHasAttr_PremiseNumberSeparator_XsdtString_

}

//	Specification of the identifier of a sub-premise. Examples of sub-premises are apartments and suites. sub-premises in a building are often uniquely identified by means of consecutive
//	identifiers. The identifier can be a number, a letter or any combination of the two. In the latter case, the identifier includes exactly one variable (range) part, which is either a
//	number or a single letter that is surrounded by fixed parts at the left (prefix) or the right (postfix).
type XsdGoPkgHasElem_SubPremiseNumber_TxsdSubPremiseTypeSequenceChoiceSubPremiseNumber_ struct {
//	Specification of the identifier of a sub-premise. Examples of sub-premises are apartments and suites. sub-premises in a building are often uniquely identified by means of consecutive
//	identifiers. The identifier can be a number, a letter or any combination of the two. In the latter case, the identifier includes exactly one variable (range) part, which is either a
//	number or a single letter that is surrounded by fixed parts at the left (prefix) or the right (postfix).
	SubPremiseNumber *TxsdSubPremiseTypeSequenceChoiceSubPremiseNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremiseNumber"`
}

//	Specification of the identifier of a sub-premise. Examples of sub-premises are apartments and suites. sub-premises in a building are often uniquely identified by means of consecutive
//	identifiers. The identifier can be a number, a letter or any combination of the two. In the latter case, the identifier includes exactly one variable (range) part, which is either a
//	number or a single letter that is surrounded by fixed parts at the left (prefix) or the right (postfix).
type XsdGoPkgHasElems_SubPremiseNumber_TxsdSubPremiseTypeSequenceChoiceSubPremiseNumber_ struct {
//	Specification of the identifier of a sub-premise. Examples of sub-premises are apartments and suites. sub-premises in a building are often uniquely identified by means of consecutive
//	identifiers. The identifier can be a number, a letter or any combination of the two. In the latter case, the identifier includes exactly one variable (range) part, which is either a
//	number or a single letter that is surrounded by fixed parts at the left (prefix) or the right (postfix).
	SubPremiseNumbers []*TxsdSubPremiseTypeSequenceChoiceSubPremiseNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremiseNumber"`
}

type TxsdSubPremiseTypeSequenceSubPremiseNameTypeOccurrence xsdt.Nmtoken

//	Since TxsdSubPremiseTypeSequenceSubPremiseNameTypeOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSubPremiseTypeSequenceSubPremiseNameTypeOccurrence) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdSubPremiseTypeSequenceSubPremiseNameTypeOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdSubPremiseTypeSequenceSubPremiseNameTypeOccurrence) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdSubPremiseTypeSequenceSubPremiseNameTypeOccurrence's alias type xsdt.Nmtoken
func (me TxsdSubPremiseTypeSequenceSubPremiseNameTypeOccurrence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdSubPremiseTypeSequenceSubPremiseNameTypeOccurrence is "Before".
func (me TxsdSubPremiseTypeSequenceSubPremiseNameTypeOccurrence) IsBefore () bool { return me == "Before" }

//	Returns true if the value of this enumerated TxsdSubPremiseTypeSequenceSubPremiseNameTypeOccurrence is "After".
func (me TxsdSubPremiseTypeSequenceSubPremiseNameTypeOccurrence) IsAfter () bool { return me == "After" }

//	EGIS Building where EGIS occurs before Building
type XsdGoPkgHasAttr_TypeOccurrence_TxsdSubPremiseTypeSequenceSubPremiseNameTypeOccurrence_ struct {
//	EGIS Building where EGIS occurs before Building
	TypeOccurrence TxsdSubPremiseTypeSequenceSubPremiseNameTypeOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 TypeOccurrence,attr"`
}

type TxsdSubPremiseTypeSequenceSubPremiseName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	EGIS Building where EGIS occurs before Building
	XsdGoPkgHasAttr_TypeOccurrence_TxsdSubPremiseTypeSequenceSubPremiseNameTypeOccurrence_

}

//	Name of the SubPremise
type XsdGoPkgHasElems_SubPremiseName_TxsdSubPremiseTypeSequenceSubPremiseName_ struct {
//	Name of the SubPremise
	SubPremiseNames []*TxsdSubPremiseTypeSequenceSubPremiseName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremiseName"`
}

//	Name of the SubPremise
type XsdGoPkgHasElem_SubPremiseName_TxsdSubPremiseTypeSequenceSubPremiseName_ struct {
//	Name of the SubPremise
	SubPremiseName *TxsdSubPremiseTypeSequenceSubPremiseName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremiseName"`
}

//	A-12 where 12 is number and A is prefix and "-" is the separator
type XsdGoPkgHasAttr_NumberPrefixSeparator_XsdtString_ struct {
//	A-12 where 12 is number and A is prefix and "-" is the separator
	NumberPrefixSeparator xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberPrefixSeparator,attr"`
}

type TxsdSubPremiseTypeSequenceSubPremiseNumberPrefix struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	A-12 where 12 is number and A is prefix and "-" is the separator
	XsdGoPkgHasAttr_NumberPrefixSeparator_XsdtString_

}

//	Prefix of the sub premise number. eg. A in A-12
type XsdGoPkgHasElems_SubPremiseNumberPrefix_TxsdSubPremiseTypeSequenceSubPremiseNumberPrefix_ struct {
//	Prefix of the sub premise number. eg. A in A-12
	SubPremiseNumberPrefixs []*TxsdSubPremiseTypeSequenceSubPremiseNumberPrefix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremiseNumberPrefix"`
}

//	Prefix of the sub premise number. eg. A in A-12
type XsdGoPkgHasElem_SubPremiseNumberPrefix_TxsdSubPremiseTypeSequenceSubPremiseNumberPrefix_ struct {
//	Prefix of the sub premise number. eg. A in A-12
	SubPremiseNumberPrefix *TxsdSubPremiseTypeSequenceSubPremiseNumberPrefix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremiseNumberPrefix"`
}

//	12-A where 12 is number and A is suffix and "-" is the separator
type XsdGoPkgHasAttr_NumberSuffixSeparator_XsdtString_ struct {
//	12-A where 12 is number and A is suffix and "-" is the separator
	NumberSuffixSeparator xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberSuffixSeparator,attr"`
}

type TxsdSubPremiseTypeSequenceSubPremiseNumberSuffix struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	12-A where 12 is number and A is suffix and "-" is the separator
	XsdGoPkgHasAttr_NumberSuffixSeparator_XsdtString_

}

//	Suffix of the sub premise number. eg. A in 12A
type XsdGoPkgHasElems_SubPremiseNumberSuffix_TxsdSubPremiseTypeSequenceSubPremiseNumberSuffix_ struct {
//	Suffix of the sub premise number. eg. A in 12A
	SubPremiseNumberSuffixs []*TxsdSubPremiseTypeSequenceSubPremiseNumberSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremiseNumberSuffix"`
}

//	Suffix of the sub premise number. eg. A in 12A
type XsdGoPkgHasElem_SubPremiseNumberSuffix_TxsdSubPremiseTypeSequenceSubPremiseNumberSuffix_ struct {
//	Suffix of the sub premise number. eg. A in 12A
	SubPremiseNumberSuffix *TxsdSubPremiseTypeSequenceSubPremiseNumberSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremiseNumberSuffix"`
}

//	Specification of a firm, company, organization, etc. It can be specified as part of an address that contains a street or a postbox. It is therefore different from a large mail user address, which contains no street.
type XsdGoPkgHasElem_Firm_TFirmType_ struct {
//	Specification of a firm, company, organization, etc. It can be specified as part of an address that contains a street or a postbox. It is therefore different from a large mail user address, which contains no street.
	Firm *TFirmType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Firm"`
}

//	Specification of a firm, company, organization, etc. It can be specified as part of an address that contains a street or a postbox. It is therefore different from a large mail user address, which contains no street.
type XsdGoPkgHasElems_Firm_TFirmType_ struct {
//	Specification of a firm, company, organization, etc. It can be specified as part of an address that contains a street or a postbox. It is therefore different from a large mail user address, which contains no street.
	Firms []*TFirmType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Firm"`
}

//	Specification of a single sub-premise. Examples of sub-premises are apartments and suites.
//	Each sub-premise should be uniquely identifiable. SubPremiseType: Specification of the name of a sub-premise type. Possible values not limited to: Suite, Appartment, Floor, Unknown
//	Multiple levels within a premise by recursively calling SubPremise Eg. Level 4, Suite 2, Block C
type XsdGoPkgHasElem_SubPremise_TSubPremiseType_ struct {
//	Specification of a single sub-premise. Examples of sub-premises are apartments and suites.
//	Each sub-premise should be uniquely identifiable. SubPremiseType: Specification of the name of a sub-premise type. Possible values not limited to: Suite, Appartment, Floor, Unknown
//	Multiple levels within a premise by recursively calling SubPremise Eg. Level 4, Suite 2, Block C
	SubPremise *TSubPremiseType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremise"`
}

//	Specification of a single sub-premise. Examples of sub-premises are apartments and suites.
//	Each sub-premise should be uniquely identifiable. SubPremiseType: Specification of the name of a sub-premise type. Possible values not limited to: Suite, Appartment, Floor, Unknown
//	Multiple levels within a premise by recursively calling SubPremise Eg. Level 4, Suite 2, Block C
type XsdGoPkgHasElems_SubPremise_TSubPremiseType_ struct {
//	Specification of a single sub-premise. Examples of sub-premises are apartments and suites.
//	Each sub-premise should be uniquely identifiable. SubPremiseType: Specification of the name of a sub-premise type. Possible values not limited to: Suite, Appartment, Floor, Unknown
//	Multiple levels within a premise by recursively calling SubPremise Eg. Level 4, Suite 2, Block C
	SubPremises []*TSubPremiseType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubPremise"`
}

type TSubPremiseType struct {
//	Name of the SubPremise Location. eg. LOBBY, BASEMENT, GROUND FLOOR, etc...
	XsdGoPkgHasElems_SubPremiseLocation_TxsdSubPremiseTypeSequenceChoiceSubPremiseLocation_

//	Specification of the identifier of a sub-premise. Examples of sub-premises are apartments and suites. sub-premises in a building are often uniquely identified by means of consecutive
//	identifiers. The identifier can be a number, a letter or any combination of the two. In the latter case, the identifier includes exactly one variable (range) part, which is either a
//	number or a single letter that is surrounded by fixed parts at the left (prefix) or the right (postfix).
	XsdGoPkgHasElems_SubPremiseNumber_TxsdSubPremiseTypeSequenceChoiceSubPremiseNumber_

	XsdGoPkgHasElems_AddressLine

//	Name of the SubPremise
	XsdGoPkgHasElems_SubPremiseName_TxsdSubPremiseTypeSequenceSubPremiseName_

//	Prefix of the sub premise number. eg. A in A-12
	XsdGoPkgHasElems_SubPremiseNumberPrefix_TxsdSubPremiseTypeSequenceSubPremiseNumberPrefix_

//	Suffix of the sub premise number. eg. A in 12A
	XsdGoPkgHasElems_SubPremiseNumberSuffix_TxsdSubPremiseTypeSequenceSubPremiseNumberSuffix_

//	Specification of a firm, company, organization, etc. It can be specified as part of an address that contains a street or a postbox. It is therefore different from a large mail user address, which contains no street.
	XsdGoPkgHasElems_Firm_TFirmType_

	XsdGoPkgHasElems_PostalCode

//	Specification of a single sub-premise. Examples of sub-premises are apartments and suites.
//	Each sub-premise should be uniquely identifiable. SubPremiseType: Specification of the name of a sub-premise type. Possible values not limited to: Suite, Appartment, Floor, Unknown
//	Multiple levels within a premise by recursively calling SubPremise Eg. Level 4, Suite 2, Block C
	XsdGoPkgHasElems_SubPremise_TSubPremiseType_

}

type ThoroughfareLeadingTypeType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

type ThoroughfareNameType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

type ThoroughfarePostDirectionType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

type ThoroughfarePreDirectionType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

type ThoroughfareTrailingTypeType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Specific to DTD to specify the version number of DTD
type XsdGoPkgHasAttr_Version_XsdtString_ struct {
//	Specific to DTD to specify the version number of DTD
	Version xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Version,attr"`
}

type TxsdXal struct {
	XsdGoPkgHasElems_AddressDetails

//	Specific to DTD to specify the version number of DTD
	XsdGoPkgHasAttr_Version_XsdtString_

}

//	Root element for a list of addresses
type XsdGoPkgHasElem_Xal struct {
//	Root element for a list of addresses
	Xal *TxsdXal `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 xAL"`
}

//	Root element for a list of addresses
type XsdGoPkgHasElems_Xal struct {
//	Root element for a list of addresses
	Xals []*TxsdXal `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 xAL"`
}

//	This container defines the details of the address. Can define multiple addresses including tracking address history
type XsdGoPkgHasElem_AddressDetails struct {
//	This container defines the details of the address. Can define multiple addresses including tracking address history
	AddressDetails *TAddressDetails `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressDetails"`
}

//	This container defines the details of the address. Can define multiple addresses including tracking address history
type XsdGoPkgHasElems_AddressDetails struct {
//	This container defines the details of the address. Can define multiple addresses including tracking address history
	AddressDetailses []*TAddressDetails `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressDetails"`
}

type TxsdAddressLine struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Free format address representation. An address can have more than one line. The order of the AddressLine elements must be preserved.
type XsdGoPkgHasElems_AddressLine struct {
//	Free format address representation. An address can have more than one line. The order of the AddressLine elements must be preserved.
	AddressLines []*TxsdAddressLine `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLine"`
}

//	Free format address representation. An address can have more than one line. The order of the AddressLine elements must be preserved.
type XsdGoPkgHasElem_AddressLine struct {
//	Free format address representation. An address can have more than one line. The order of the AddressLine elements must be preserved.
	AddressLine *TxsdAddressLine `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AddressLine"`
}

type TxsdLocalitySequenceLocalityName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Name of the locality
type XsdGoPkgHasElems_LocalityName_TxsdLocalitySequenceLocalityName_ struct {
//	Name of the locality
	LocalityNames []*TxsdLocalitySequenceLocalityName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 LocalityName"`
}

//	Name of the locality
type XsdGoPkgHasElem_LocalityName_TxsdLocalitySequenceLocalityName_ struct {
//	Name of the locality
	LocalityName *TxsdLocalitySequenceLocalityName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 LocalityName"`
}

type TxsdLocality struct {
	XsdGoPkgHasElems_PostBox

	XsdGoPkgHasElems_PostOffice

	XsdGoPkgHasElems_AddressLine

//	Name of the locality
	XsdGoPkgHasElems_LocalityName_TxsdLocalitySequenceLocalityName_

	XsdGoPkgHasElems_Thoroughfare

	XsdGoPkgHasElems_Premise

	XsdGoPkgHasElems_PostalCode

}

//	Locality is one level lower than adminisstrative area. Eg.: cities, reservations and any other built-up areas.
type XsdGoPkgHasElem_Locality struct {
//	Locality is one level lower than adminisstrative area. Eg.: cities, reservations and any other built-up areas.
	Locality *TxsdLocality `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Locality"`
}

//	Locality is one level lower than adminisstrative area. Eg.: cities, reservations and any other built-up areas.
type XsdGoPkgHasElems_Locality struct {
//	Locality is one level lower than adminisstrative area. Eg.: cities, reservations and any other built-up areas.
	Localities []*TxsdLocality `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Locality"`
}

type TxsdThoroughfareDependentThoroughfares xsdt.Nmtoken

//	Since TxsdThoroughfareDependentThoroughfares is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdThoroughfareDependentThoroughfares) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdThoroughfareDependentThoroughfares is just a simple String type, this merely returns the current string value.
func (me TxsdThoroughfareDependentThoroughfares) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdThoroughfareDependentThoroughfares's alias type xsdt.Nmtoken
func (me TxsdThoroughfareDependentThoroughfares) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdThoroughfareDependentThoroughfares is "Yes".
func (me TxsdThoroughfareDependentThoroughfares) IsYes () bool { return me == "Yes" }

//	Returns true if the value of this enumerated TxsdThoroughfareDependentThoroughfares is "No".
func (me TxsdThoroughfareDependentThoroughfares) IsNo () bool { return me == "No" }

//	Does this thoroughfare have a a dependent thoroughfare? Corner of street X, etc
type XsdGoPkgHasAttr_DependentThoroughfares_TxsdThoroughfareDependentThoroughfares_ struct {
//	Does this thoroughfare have a a dependent thoroughfare? Corner of street X, etc
	DependentThoroughfares TxsdThoroughfareDependentThoroughfares `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentThoroughfares,attr"`
}

//	Corner of, Intersection of
type XsdGoPkgHasAttr_DependentThoroughfaresIndicator_XsdtString_ struct {
//	Corner of, Intersection of
	DependentThoroughfaresIndicator xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentThoroughfaresIndicator,attr"`
}

//	Corner of Street1 AND Street 2 where AND is the Connector
type XsdGoPkgHasAttr_DependentThoroughfaresConnector_XsdtString_ struct {
//	Corner of Street1 AND Street 2 where AND is the Connector
	DependentThoroughfaresConnector xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentThoroughfaresConnector,attr"`
}

//	STS in GEORGE and ADELAIDE STS, RDS IN A and B RDS, etc. Use only when both the street types are the same
type XsdGoPkgHasAttr_DependentThoroughfaresType_XsdtString_ struct {
//	STS in GEORGE and ADELAIDE STS, RDS IN A and B RDS, etc. Use only when both the street types are the same
	DependentThoroughfaresType xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentThoroughfaresType,attr"`
}

type TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType xsdt.Nmtoken

//	Since TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType is just a simple String type, this merely returns the current string value.
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType's alias type xsdt.Nmtoken
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType is "Odd".
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType) IsOdd () bool { return me == "Odd" }

//	Returns true if the value of this enumerated TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType is "Even".
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType) IsEven () bool { return me == "Even" }

//	Thoroughfare number ranges are odd or even
type XsdGoPkgHasAttr_RangeType_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType_ struct {
//	Thoroughfare number ranges are odd or even
	RangeType TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 RangeType,attr"`
}

//	"-" in 12-14  or "Thru" in 12 Thru 14 etc.
type XsdGoPkgHasAttr_Separator_XsdtString_ struct {
//	"-" in 12-14  or "Thru" in 12 Thru 14 etc.
	Separator xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Separator,attr"`
}

type TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeIndicatorOccurrence xsdt.Nmtoken

//	Since TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeIndicatorOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeIndicatorOccurrence) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeIndicatorOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeIndicatorOccurrence) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeIndicatorOccurrence's alias type xsdt.Nmtoken
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeIndicatorOccurrence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeIndicatorOccurrence is "Before".
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeIndicatorOccurrence) IsBefore () bool { return me == "Before" }

//	Returns true if the value of this enumerated TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeIndicatorOccurrence is "After".
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeIndicatorOccurrence) IsAfter () bool { return me == "After" }

//	No.12-14 where "No." is before actual street number
type XsdGoPkgHasAttr_IndicatorOccurrence_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeIndicatorOccurrence_ struct {
//	No.12-14 where "No." is before actual street number
	IndicatorOccurrence TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 IndicatorOccurrence,attr"`
}

type TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence xsdt.Nmtoken

//	Since TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence's alias type xsdt.Nmtoken
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence is "BeforeName".
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence) IsBeforeName () bool { return me == "BeforeName" }

//	Returns true if the value of this enumerated TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence is "AfterName".
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence) IsAfterName () bool { return me == "AfterName" }

//	Returns true if the value of this enumerated TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence is "BeforeType".
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence) IsBeforeType () bool { return me == "BeforeType" }

//	Returns true if the value of this enumerated TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence is "AfterType".
func (me TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence) IsAfterType () bool { return me == "AfterType" }

//	23-25 Archer St, where number appears before name
type XsdGoPkgHasAttr_NumberRangeOccurrence_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence_ struct {
//	23-25 Archer St, where number appears before name
	NumberRangeOccurrence TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberRangeOccurrence,attr"`
}

type TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberFrom struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElems_ThoroughfareNumberPrefix

	XsdGoPkgHasElems_ThoroughfareNumber

	XsdGoPkgHasElems_ThoroughfareNumberSuffix

	XsdGoPkgHasAtts_GrPostal

}

//	Starting number in the range
type XsdGoPkgHasElem_ThoroughfareNumberFrom_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberFrom_ struct {
//	Starting number in the range
	ThoroughfareNumberFrom *TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberFrom `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberFrom"`
}

//	Starting number in the range
type XsdGoPkgHasElems_ThoroughfareNumberFrom_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberFrom_ struct {
//	Starting number in the range
	ThoroughfareNumberFroms []*TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberFrom `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberFrom"`
}

type TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberTo struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElems_ThoroughfareNumberPrefix

	XsdGoPkgHasElems_ThoroughfareNumber

	XsdGoPkgHasElems_ThoroughfareNumberSuffix

	XsdGoPkgHasAtts_GrPostal

}

//	Ending number in the range
type XsdGoPkgHasElem_ThoroughfareNumberTo_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberTo_ struct {
//	Ending number in the range
	ThoroughfareNumberTo *TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberTo `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberTo"`
}

//	Ending number in the range
type XsdGoPkgHasElems_ThoroughfareNumberTo_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberTo_ struct {
//	Ending number in the range
	ThoroughfareNumberTos []*TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberTo `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberTo"`
}

type TxsdThoroughfareSequenceChoiceThoroughfareNumberRange struct {
	XsdGoPkgHasElems_AddressLine

//	Starting number in the range
	XsdGoPkgHasElems_ThoroughfareNumberFrom_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberFrom_

//	Ending number in the range
	XsdGoPkgHasElems_ThoroughfareNumberTo_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeSequenceThoroughfareNumberTo_

	XsdGoPkgHasAtts_GrPostal

//	"-" in 12-14  or "Thru" in 12 Thru 14 etc.
	XsdGoPkgHasAttr_Separator_XsdtString_

//	23-25 Archer St, where number appears before name
	XsdGoPkgHasAttr_NumberRangeOccurrence_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeNumberRangeOccurrence_

//	No.12-14 where "No." is before actual street number
	XsdGoPkgHasAttr_IndicatorOccurrence_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeIndicatorOccurrence_

//	Thoroughfare number ranges are odd or even
	XsdGoPkgHasAttr_RangeType_TxsdThoroughfareSequenceChoiceThoroughfareNumberRangeRangeType_

}

//	A container to represent a range of numbers (from x thru y)for a thoroughfare. eg. 1-2 Albert Av
type XsdGoPkgHasElems_ThoroughfareNumberRange_TxsdThoroughfareSequenceChoiceThoroughfareNumberRange_ struct {
//	A container to represent a range of numbers (from x thru y)for a thoroughfare. eg. 1-2 Albert Av
	ThoroughfareNumberRanges []*TxsdThoroughfareSequenceChoiceThoroughfareNumberRange `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberRange"`
}

//	A container to represent a range of numbers (from x thru y)for a thoroughfare. eg. 1-2 Albert Av
type XsdGoPkgHasElem_ThoroughfareNumberRange_TxsdThoroughfareSequenceChoiceThoroughfareNumberRange_ struct {
//	A container to represent a range of numbers (from x thru y)for a thoroughfare. eg. 1-2 Albert Av
	ThoroughfareNumberRange *TxsdThoroughfareSequenceChoiceThoroughfareNumberRange `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberRange"`
}

//	North Baker Street, where North is the pre-direction. The direction appears before the name.
type XsdGoPkgHasElems_ThoroughfarePreDirection_ThoroughfarePreDirectionType_ struct {
//	North Baker Street, where North is the pre-direction. The direction appears before the name.
	ThoroughfarePreDirections []*ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfarePreDirection"`
}

//	North Baker Street, where North is the pre-direction. The direction appears before the name.
type XsdGoPkgHasElem_ThoroughfarePreDirection_ThoroughfarePreDirectionType_ struct {
//	North Baker Street, where North is the pre-direction. The direction appears before the name.
	ThoroughfarePreDirection *ThoroughfarePreDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfarePreDirection"`
}

//	Appears before the thoroughfare name. Ed. Spanish: Avenida Aurora, where Avenida is the leading type / French: Rue Moliere, where Rue is the leading type.
type XsdGoPkgHasElem_ThoroughfareLeadingType_ThoroughfareLeadingTypeType_ struct {
//	Appears before the thoroughfare name. Ed. Spanish: Avenida Aurora, where Avenida is the leading type / French: Rue Moliere, where Rue is the leading type.
	ThoroughfareLeadingType *ThoroughfareLeadingTypeType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareLeadingType"`
}

//	Appears before the thoroughfare name. Ed. Spanish: Avenida Aurora, where Avenida is the leading type / French: Rue Moliere, where Rue is the leading type.
type XsdGoPkgHasElems_ThoroughfareLeadingType_ThoroughfareLeadingTypeType_ struct {
//	Appears before the thoroughfare name. Ed. Spanish: Avenida Aurora, where Avenida is the leading type / French: Rue Moliere, where Rue is the leading type.
	ThoroughfareLeadingTypes []*ThoroughfareLeadingTypeType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareLeadingType"`
}

//	Specification of the name of a Thoroughfare (also dependant street name): street name, canal name, etc.
type XsdGoPkgHasElems_ThoroughfareName_ThoroughfareNameType_ struct {
//	Specification of the name of a Thoroughfare (also dependant street name): street name, canal name, etc.
	ThoroughfareNames []*ThoroughfareNameType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareName"`
}

//	Specification of the name of a Thoroughfare (also dependant street name): street name, canal name, etc.
type XsdGoPkgHasElem_ThoroughfareName_ThoroughfareNameType_ struct {
//	Specification of the name of a Thoroughfare (also dependant street name): street name, canal name, etc.
	ThoroughfareName *ThoroughfareNameType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareName"`
}

//	Appears after the thoroughfare name. Ed. British: Baker Lane, where Lane is the trailing type.
type XsdGoPkgHasElems_ThoroughfareTrailingType_ThoroughfareTrailingTypeType_ struct {
//	Appears after the thoroughfare name. Ed. British: Baker Lane, where Lane is the trailing type.
	ThoroughfareTrailingTypes []*ThoroughfareTrailingTypeType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareTrailingType"`
}

//	Appears after the thoroughfare name. Ed. British: Baker Lane, where Lane is the trailing type.
type XsdGoPkgHasElem_ThoroughfareTrailingType_ThoroughfareTrailingTypeType_ struct {
//	Appears after the thoroughfare name. Ed. British: Baker Lane, where Lane is the trailing type.
	ThoroughfareTrailingType *ThoroughfareTrailingTypeType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareTrailingType"`
}

//	221-bis Baker Street North, where North is the post-direction. The post-direction appears after the name.
type XsdGoPkgHasElems_ThoroughfarePostDirection_ThoroughfarePostDirectionType_ struct {
//	221-bis Baker Street North, where North is the post-direction. The post-direction appears after the name.
	ThoroughfarePostDirections []*ThoroughfarePostDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfarePostDirection"`
}

//	221-bis Baker Street North, where North is the post-direction. The post-direction appears after the name.
type XsdGoPkgHasElem_ThoroughfarePostDirection_ThoroughfarePostDirectionType_ struct {
//	221-bis Baker Street North, where North is the post-direction. The post-direction appears after the name.
	ThoroughfarePostDirection *ThoroughfarePostDirectionType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfarePostDirection"`
}

type TxsdThoroughfareSequenceDependentThoroughfare struct {
	XsdGoPkgHasElems_AddressLine

}

//	DependentThroughfare is related to a street; occurs in GB, IE, ES, PT
type XsdGoPkgHasElems_DependentThoroughfare_TxsdThoroughfareSequenceDependentThoroughfare_ struct {
//	DependentThroughfare is related to a street; occurs in GB, IE, ES, PT
	DependentThoroughfares []*TxsdThoroughfareSequenceDependentThoroughfare `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentThoroughfare"`
}

//	DependentThroughfare is related to a street; occurs in GB, IE, ES, PT
type XsdGoPkgHasElem_DependentThoroughfare_TxsdThoroughfareSequenceDependentThoroughfare_ struct {
//	DependentThroughfare is related to a street; occurs in GB, IE, ES, PT
	DependentThoroughfare *TxsdThoroughfareSequenceDependentThoroughfare `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DependentThoroughfare"`
}

type TxsdThoroughfare struct {
	XsdGoPkgHasElems_ThoroughfareNumber

//	A container to represent a range of numbers (from x thru y)for a thoroughfare. eg. 1-2 Albert Av
	XsdGoPkgHasElems_ThoroughfareNumberRange_TxsdThoroughfareSequenceChoiceThoroughfareNumberRange_

	XsdGoPkgHasElems_Premise

	XsdGoPkgHasElems_PostalCode

	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElems_ThoroughfareNumberPrefix

	XsdGoPkgHasElems_ThoroughfareNumberSuffix

//	North Baker Street, where North is the pre-direction. The direction appears before the name.
	XsdGoPkgHasElems_ThoroughfarePreDirection_ThoroughfarePreDirectionType_

//	Appears before the thoroughfare name. Ed. Spanish: Avenida Aurora, where Avenida is the leading type / French: Rue Moliere, where Rue is the leading type.
	XsdGoPkgHasElems_ThoroughfareLeadingType_ThoroughfareLeadingTypeType_

//	Specification of the name of a Thoroughfare (also dependant street name): street name, canal name, etc.
	XsdGoPkgHasElems_ThoroughfareName_ThoroughfareNameType_

//	Appears after the thoroughfare name. Ed. British: Baker Lane, where Lane is the trailing type.
	XsdGoPkgHasElems_ThoroughfareTrailingType_ThoroughfareTrailingTypeType_

//	221-bis Baker Street North, where North is the post-direction. The post-direction appears after the name.
	XsdGoPkgHasElems_ThoroughfarePostDirection_ThoroughfarePostDirectionType_

//	DependentThroughfare is related to a street; occurs in GB, IE, ES, PT
	XsdGoPkgHasElems_DependentThoroughfare_TxsdThoroughfareSequenceDependentThoroughfare_

//	STS in GEORGE and ADELAIDE STS, RDS IN A and B RDS, etc. Use only when both the street types are the same
	XsdGoPkgHasAttr_DependentThoroughfaresType_XsdtString_

//	Corner of, Intersection of
	XsdGoPkgHasAttr_DependentThoroughfaresIndicator_XsdtString_

//	Does this thoroughfare have a a dependent thoroughfare? Corner of street X, etc
	XsdGoPkgHasAttr_DependentThoroughfares_TxsdThoroughfareDependentThoroughfares_

//	Corner of Street1 AND Street 2 where AND is the Connector
	XsdGoPkgHasAttr_DependentThoroughfaresConnector_XsdtString_

}

//	Specification of a thoroughfare. A thoroughfare could be a rd, street, canal, river, etc.  Note dependentlocality in a street. For example, in some countries, a large street will
//	have many subdivisions with numbers. Normally the subdivision name is the same as the road name, but with a number to identifiy it. Eg. SOI SUKUMVIT 3, SUKUMVIT RD, BANGKOK
type XsdGoPkgHasElems_Thoroughfare struct {
//	Specification of a thoroughfare. A thoroughfare could be a rd, street, canal, river, etc.  Note dependentlocality in a street. For example, in some countries, a large street will
//	have many subdivisions with numbers. Normally the subdivision name is the same as the road name, but with a number to identifiy it. Eg. SOI SUKUMVIT 3, SUKUMVIT RD, BANGKOK
	Thoroughfares []*TxsdThoroughfare `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Thoroughfare"`
}

//	Specification of a thoroughfare. A thoroughfare could be a rd, street, canal, river, etc.  Note dependentlocality in a street. For example, in some countries, a large street will
//	have many subdivisions with numbers. Normally the subdivision name is the same as the road name, but with a number to identifiy it. Eg. SOI SUKUMVIT 3, SUKUMVIT RD, BANGKOK
type XsdGoPkgHasElem_Thoroughfare struct {
//	Specification of a thoroughfare. A thoroughfare could be a rd, street, canal, river, etc.  Note dependentlocality in a street. For example, in some countries, a large street will
//	have many subdivisions with numbers. Normally the subdivision name is the same as the road name, but with a number to identifiy it. Eg. SOI SUKUMVIT 3, SUKUMVIT RD, BANGKOK
	Thoroughfare *TxsdThoroughfare `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Thoroughfare"`
}

type TxsdAdministrativeAreaSequenceAdministrativeAreaName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Name of the administrative area. eg. MI in USA, NSW in Australia
type XsdGoPkgHasElem_AdministrativeAreaName_TxsdAdministrativeAreaSequenceAdministrativeAreaName_ struct {
//	Name of the administrative area. eg. MI in USA, NSW in Australia
	AdministrativeAreaName *TxsdAdministrativeAreaSequenceAdministrativeAreaName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AdministrativeAreaName"`
}

//	Name of the administrative area. eg. MI in USA, NSW in Australia
type XsdGoPkgHasElems_AdministrativeAreaName_TxsdAdministrativeAreaSequenceAdministrativeAreaName_ struct {
//	Name of the administrative area. eg. MI in USA, NSW in Australia
	AdministrativeAreaNames []*TxsdAdministrativeAreaSequenceAdministrativeAreaName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AdministrativeAreaName"`
}

type TxsdAdministrativeAreaSequenceSubAdministrativeAreaSequenceSubAdministrativeAreaName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Name of the sub-administrative area
type XsdGoPkgHasElems_SubAdministrativeAreaName_TxsdAdministrativeAreaSequenceSubAdministrativeAreaSequenceSubAdministrativeAreaName_ struct {
//	Name of the sub-administrative area
	SubAdministrativeAreaNames []*TxsdAdministrativeAreaSequenceSubAdministrativeAreaSequenceSubAdministrativeAreaName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubAdministrativeAreaName"`
}

//	Name of the sub-administrative area
type XsdGoPkgHasElem_SubAdministrativeAreaName_TxsdAdministrativeAreaSequenceSubAdministrativeAreaSequenceSubAdministrativeAreaName_ struct {
//	Name of the sub-administrative area
	SubAdministrativeAreaName *TxsdAdministrativeAreaSequenceSubAdministrativeAreaSequenceSubAdministrativeAreaName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubAdministrativeAreaName"`
}

type TxsdAdministrativeAreaSequenceSubAdministrativeArea struct {
	XsdGoPkgHasElems_Locality

	XsdGoPkgHasElems_PostOffice

	XsdGoPkgHasElems_PostalCode

	XsdGoPkgHasElems_AddressLine

//	Name of the sub-administrative area
	XsdGoPkgHasElems_SubAdministrativeAreaName_TxsdAdministrativeAreaSequenceSubAdministrativeAreaSequenceSubAdministrativeAreaName_

}

//	Specification of a sub-administrative area. An example of a sub-administrative areas is a county. There are two places where the name of an administrative
//	area can be specified and in this case, one becomes sub-administrative area.
type XsdGoPkgHasElems_SubAdministrativeArea_TxsdAdministrativeAreaSequenceSubAdministrativeArea_ struct {
//	Specification of a sub-administrative area. An example of a sub-administrative areas is a county. There are two places where the name of an administrative
//	area can be specified and in this case, one becomes sub-administrative area.
	SubAdministrativeAreas []*TxsdAdministrativeAreaSequenceSubAdministrativeArea `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubAdministrativeArea"`
}

//	Specification of a sub-administrative area. An example of a sub-administrative areas is a county. There are two places where the name of an administrative
//	area can be specified and in this case, one becomes sub-administrative area.
type XsdGoPkgHasElem_SubAdministrativeArea_TxsdAdministrativeAreaSequenceSubAdministrativeArea_ struct {
//	Specification of a sub-administrative area. An example of a sub-administrative areas is a county. There are two places where the name of an administrative
//	area can be specified and in this case, one becomes sub-administrative area.
	SubAdministrativeArea *TxsdAdministrativeAreaSequenceSubAdministrativeArea `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 SubAdministrativeArea"`
}

type TxsdAdministrativeArea struct {
	XsdGoPkgHasElems_Locality

	XsdGoPkgHasElems_PostOffice

	XsdGoPkgHasElems_PostalCode

	XsdGoPkgHasElems_AddressLine

//	Name of the administrative area. eg. MI in USA, NSW in Australia
	XsdGoPkgHasElems_AdministrativeAreaName_TxsdAdministrativeAreaSequenceAdministrativeAreaName_

//	Specification of a sub-administrative area. An example of a sub-administrative areas is a county. There are two places where the name of an administrative
//	area can be specified and in this case, one becomes sub-administrative area.
	XsdGoPkgHasElems_SubAdministrativeArea_TxsdAdministrativeAreaSequenceSubAdministrativeArea_

}

//	Examples of administrative areas are provinces counties, special regions (such as "Rijnmond"), etc.
type XsdGoPkgHasElem_AdministrativeArea struct {
//	Examples of administrative areas are provinces counties, special regions (such as "Rijnmond"), etc.
	AdministrativeArea *TxsdAdministrativeArea `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AdministrativeArea"`
}

//	Examples of administrative areas are provinces counties, special regions (such as "Rijnmond"), etc.
type XsdGoPkgHasElems_AdministrativeArea struct {
//	Examples of administrative areas are provinces counties, special regions (such as "Rijnmond"), etc.
	AdministrativeAreas []*TxsdAdministrativeArea `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 AdministrativeArea"`
}

type TxsdPostOfficeSequenceChoicePostOfficeName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Specification of the name of the post office. This can be a rural postoffice where post is delivered or a post office containing post office boxes.
type XsdGoPkgHasElems_PostOfficeName_TxsdPostOfficeSequenceChoicePostOfficeName_ struct {
//	Specification of the name of the post office. This can be a rural postoffice where post is delivered or a post office containing post office boxes.
	PostOfficeNames []*TxsdPostOfficeSequenceChoicePostOfficeName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostOfficeName"`
}

//	Specification of the name of the post office. This can be a rural postoffice where post is delivered or a post office containing post office boxes.
type XsdGoPkgHasElem_PostOfficeName_TxsdPostOfficeSequenceChoicePostOfficeName_ struct {
//	Specification of the name of the post office. This can be a rural postoffice where post is delivered or a post office containing post office boxes.
	PostOfficeName *TxsdPostOfficeSequenceChoicePostOfficeName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostOfficeName"`
}

type TxsdPostOfficeSequenceChoicePostOfficeNumberIndicatorOccurrence xsdt.Nmtoken

//	Since TxsdPostOfficeSequenceChoicePostOfficeNumberIndicatorOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPostOfficeSequenceChoicePostOfficeNumberIndicatorOccurrence) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdPostOfficeSequenceChoicePostOfficeNumberIndicatorOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdPostOfficeSequenceChoicePostOfficeNumberIndicatorOccurrence) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdPostOfficeSequenceChoicePostOfficeNumberIndicatorOccurrence's alias type xsdt.Nmtoken
func (me TxsdPostOfficeSequenceChoicePostOfficeNumberIndicatorOccurrence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdPostOfficeSequenceChoicePostOfficeNumberIndicatorOccurrence is "Before".
func (me TxsdPostOfficeSequenceChoicePostOfficeNumberIndicatorOccurrence) IsBefore () bool { return me == "Before" }

//	Returns true if the value of this enumerated TxsdPostOfficeSequenceChoicePostOfficeNumberIndicatorOccurrence is "After".
func (me TxsdPostOfficeSequenceChoicePostOfficeNumberIndicatorOccurrence) IsAfter () bool { return me == "After" }

//	MS occurs before 62 in MS 62
type XsdGoPkgHasAttr_IndicatorOccurrence_TxsdPostOfficeSequenceChoicePostOfficeNumberIndicatorOccurrence_ struct {
//	MS occurs before 62 in MS 62
	IndicatorOccurrence TxsdPostOfficeSequenceChoicePostOfficeNumberIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 IndicatorOccurrence,attr"`
}

type TxsdPostOfficeSequenceChoicePostOfficeNumber struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	MS occurs before 62 in MS 62
	XsdGoPkgHasAttr_IndicatorOccurrence_TxsdPostOfficeSequenceChoicePostOfficeNumberIndicatorOccurrence_

}

//	Specification of the number of the postoffice. Common in rural postoffices
type XsdGoPkgHasElems_PostOfficeNumber_TxsdPostOfficeSequenceChoicePostOfficeNumber_ struct {
//	Specification of the number of the postoffice. Common in rural postoffices
	PostOfficeNumbers []*TxsdPostOfficeSequenceChoicePostOfficeNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostOfficeNumber"`
}

//	Specification of the number of the postoffice. Common in rural postoffices
type XsdGoPkgHasElem_PostOfficeNumber_TxsdPostOfficeSequenceChoicePostOfficeNumber_ struct {
//	Specification of the number of the postoffice. Common in rural postoffices
	PostOfficeNumber *TxsdPostOfficeSequenceChoicePostOfficeNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostOfficeNumber"`
}

type TxsdPostOffice struct {
//	Specification of the name of the post office. This can be a rural postoffice where post is delivered or a post office containing post office boxes.
	XsdGoPkgHasElems_PostOfficeName_TxsdPostOfficeSequenceChoicePostOfficeName_

//	Specification of the number of the postoffice. Common in rural postoffices
	XsdGoPkgHasElems_PostOfficeNumber_TxsdPostOfficeSequenceChoicePostOfficeNumber_

	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElems_PostBox

	XsdGoPkgHasElems_PostalCode

}

//	Specification of a post office. Examples are a rural post office where post is delivered and a post office containing post office boxes.
type XsdGoPkgHasElem_PostOffice struct {
//	Specification of a post office. Examples are a rural post office where post is delivered and a post office containing post office boxes.
	PostOffice *TxsdPostOffice `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostOffice"`
}

//	Specification of a post office. Examples are a rural post office where post is delivered and a post office containing post office boxes.
type XsdGoPkgHasElems_PostOffice struct {
//	Specification of a post office. Examples are a rural post office where post is delivered and a post office containing post office boxes.
	PostOffices []*TxsdPostOffice `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostOffice"`
}

type TxsdPostalCodeSequencePostalCodeNumber struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Specification of a postcode. The postcode is formatted according to country-specific rules. Example: SW3 0A8-1A, 600074, 2067
type XsdGoPkgHasElems_PostalCodeNumber_TxsdPostalCodeSequencePostalCodeNumber_ struct {
//	Specification of a postcode. The postcode is formatted according to country-specific rules. Example: SW3 0A8-1A, 600074, 2067
	PostalCodeNumbers []*TxsdPostalCodeSequencePostalCodeNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalCodeNumber"`
}

//	Specification of a postcode. The postcode is formatted according to country-specific rules. Example: SW3 0A8-1A, 600074, 2067
type XsdGoPkgHasElem_PostalCodeNumber_TxsdPostalCodeSequencePostalCodeNumber_ struct {
//	Specification of a postcode. The postcode is formatted according to country-specific rules. Example: SW3 0A8-1A, 600074, 2067
	PostalCodeNumber *TxsdPostalCodeSequencePostalCodeNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalCodeNumber"`
}

//	The separator between postal code number and the extension. Eg. "-"
type XsdGoPkgHasAttr_NumberExtensionSeparator_XsdtString_ struct {
//	The separator between postal code number and the extension. Eg. "-"
	NumberExtensionSeparator xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberExtensionSeparator,attr"`
}

type TxsdPostalCodeSequencePostalCodeNumberExtension struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	The separator between postal code number and the extension. Eg. "-"
	XsdGoPkgHasAttr_NumberExtensionSeparator_XsdtString_

}

//	Examples are: 1234 (USA), 1G (UK), etc.
type XsdGoPkgHasElems_PostalCodeNumberExtension_TxsdPostalCodeSequencePostalCodeNumberExtension_ struct {
//	Examples are: 1234 (USA), 1G (UK), etc.
	PostalCodeNumberExtensions []*TxsdPostalCodeSequencePostalCodeNumberExtension `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalCodeNumberExtension"`
}

//	Examples are: 1234 (USA), 1G (UK), etc.
type XsdGoPkgHasElem_PostalCodeNumberExtension_TxsdPostalCodeSequencePostalCodeNumberExtension_ struct {
//	Examples are: 1234 (USA), 1G (UK), etc.
	PostalCodeNumberExtension *TxsdPostalCodeSequencePostalCodeNumberExtension `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalCodeNumberExtension"`
}

type TxsdPostalCodeSequencePostTownSequencePostTownName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Name of the post town
type XsdGoPkgHasElems_PostTownName_TxsdPostalCodeSequencePostTownSequencePostTownName_ struct {
//	Name of the post town
	PostTownNames []*TxsdPostalCodeSequencePostTownSequencePostTownName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostTownName"`
}

//	Name of the post town
type XsdGoPkgHasElem_PostTownName_TxsdPostalCodeSequencePostTownSequencePostTownName_ struct {
//	Name of the post town
	PostTownName *TxsdPostalCodeSequencePostTownSequencePostTownName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostTownName"`
}

type TxsdPostalCodeSequencePostTownSequencePostTownSuffix struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	GENERAL PO in MIAMI GENERAL PO
type XsdGoPkgHasElem_PostTownSuffix_TxsdPostalCodeSequencePostTownSequencePostTownSuffix_ struct {
//	GENERAL PO in MIAMI GENERAL PO
	PostTownSuffix *TxsdPostalCodeSequencePostTownSequencePostTownSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostTownSuffix"`
}

//	GENERAL PO in MIAMI GENERAL PO
type XsdGoPkgHasElems_PostTownSuffix_TxsdPostalCodeSequencePostTownSequencePostTownSuffix_ struct {
//	GENERAL PO in MIAMI GENERAL PO
	PostTownSuffixs []*TxsdPostalCodeSequencePostTownSequencePostTownSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostTownSuffix"`
}

type TxsdPostalCodeSequencePostTown struct {
	XsdGoPkgHasElems_AddressLine

//	Name of the post town
	XsdGoPkgHasElems_PostTownName_TxsdPostalCodeSequencePostTownSequencePostTownName_

//	GENERAL PO in MIAMI GENERAL PO
	XsdGoPkgHasElems_PostTownSuffix_TxsdPostalCodeSequencePostTownSequencePostTownSuffix_

}

//	A post town is not the same as a locality. A post town can encompass a collection of (small) localities. It can also be a subpart of a locality. An actual post town in Norway is "Bergen".
type XsdGoPkgHasElems_PostTown_TxsdPostalCodeSequencePostTown_ struct {
//	A post town is not the same as a locality. A post town can encompass a collection of (small) localities. It can also be a subpart of a locality. An actual post town in Norway is "Bergen".
	PostTowns []*TxsdPostalCodeSequencePostTown `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostTown"`
}

//	A post town is not the same as a locality. A post town can encompass a collection of (small) localities. It can also be a subpart of a locality. An actual post town in Norway is "Bergen".
type XsdGoPkgHasElem_PostTown_TxsdPostalCodeSequencePostTown_ struct {
//	A post town is not the same as a locality. A post town can encompass a collection of (small) localities. It can also be a subpart of a locality. An actual post town in Norway is "Bergen".
	PostTown *TxsdPostalCodeSequencePostTown `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostTown"`
}

type TxsdPostalCode struct {
	XsdGoPkgHasElems_AddressLine

//	Specification of a postcode. The postcode is formatted according to country-specific rules. Example: SW3 0A8-1A, 600074, 2067
	XsdGoPkgHasElems_PostalCodeNumber_TxsdPostalCodeSequencePostalCodeNumber_

//	Examples are: 1234 (USA), 1G (UK), etc.
	XsdGoPkgHasElems_PostalCodeNumberExtension_TxsdPostalCodeSequencePostalCodeNumberExtension_

//	A post town is not the same as a locality. A post town can encompass a collection of (small) localities. It can also be a subpart of a locality. An actual post town in Norway is "Bergen".
	XsdGoPkgHasElems_PostTown_TxsdPostalCodeSequencePostTown_

}

//	PostalCode is the container element for either simple or complex (extended) postal codes. Type: Area Code, Postcode, etc.
type XsdGoPkgHasElems_PostalCode struct {
//	PostalCode is the container element for either simple or complex (extended) postal codes. Type: Area Code, Postcode, etc.
	PostalCodes []*TxsdPostalCode `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalCode"`
}

//	PostalCode is the container element for either simple or complex (extended) postal codes. Type: Area Code, Postcode, etc.
type XsdGoPkgHasElem_PostalCode struct {
//	PostalCode is the container element for either simple or complex (extended) postal codes. Type: Area Code, Postcode, etc.
	PostalCode *TxsdPostalCode `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostalCode"`
}

type TxsdPostBoxSequencePostBoxNumber struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Specification of the number of a postbox
type XsdGoPkgHasElem_PostBoxNumber_TxsdPostBoxSequencePostBoxNumber_ struct {
//	Specification of the number of a postbox
	PostBoxNumber *TxsdPostBoxSequencePostBoxNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostBoxNumber"`
}

//	Specification of the number of a postbox
type XsdGoPkgHasElems_PostBoxNumber_TxsdPostBoxSequencePostBoxNumber_ struct {
//	Specification of the number of a postbox
	PostBoxNumbers []*TxsdPostBoxSequencePostBoxNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostBoxNumber"`
}

type TxsdPostBoxSequencePostBoxNumberPrefix struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Specification of the prefix of the post box number. eg. A in POBox:A-123
type XsdGoPkgHasElems_PostBoxNumberPrefix_TxsdPostBoxSequencePostBoxNumberPrefix_ struct {
//	Specification of the prefix of the post box number. eg. A in POBox:A-123
	PostBoxNumberPrefixs []*TxsdPostBoxSequencePostBoxNumberPrefix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostBoxNumberPrefix"`
}

//	Specification of the prefix of the post box number. eg. A in POBox:A-123
type XsdGoPkgHasElem_PostBoxNumberPrefix_TxsdPostBoxSequencePostBoxNumberPrefix_ struct {
//	Specification of the prefix of the post box number. eg. A in POBox:A-123
	PostBoxNumberPrefix *TxsdPostBoxSequencePostBoxNumberPrefix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostBoxNumberPrefix"`
}

type TxsdPostBoxSequencePostBoxNumberSuffix struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Specification of the suffix of the post box number. eg. A in POBox:123A
type XsdGoPkgHasElems_PostBoxNumberSuffix_TxsdPostBoxSequencePostBoxNumberSuffix_ struct {
//	Specification of the suffix of the post box number. eg. A in POBox:123A
	PostBoxNumberSuffixs []*TxsdPostBoxSequencePostBoxNumberSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostBoxNumberSuffix"`
}

//	Specification of the suffix of the post box number. eg. A in POBox:123A
type XsdGoPkgHasElem_PostBoxNumberSuffix_TxsdPostBoxSequencePostBoxNumberSuffix_ struct {
//	Specification of the suffix of the post box number. eg. A in POBox:123A
	PostBoxNumberSuffix *TxsdPostBoxSequencePostBoxNumberSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostBoxNumberSuffix"`
}

type TxsdPostBoxSequencePostBoxNumberExtension struct {
	XsdGoPkgHasCdata

}

//	Some countries like USA have POBox as 12345-123
type XsdGoPkgHasElems_PostBoxNumberExtension_TxsdPostBoxSequencePostBoxNumberExtension_ struct {
//	Some countries like USA have POBox as 12345-123
	PostBoxNumberExtensions []*TxsdPostBoxSequencePostBoxNumberExtension `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostBoxNumberExtension"`
}

//	Some countries like USA have POBox as 12345-123
type XsdGoPkgHasElem_PostBoxNumberExtension_TxsdPostBoxSequencePostBoxNumberExtension_ struct {
//	Some countries like USA have POBox as 12345-123
	PostBoxNumberExtension *TxsdPostBoxSequencePostBoxNumberExtension `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostBoxNumberExtension"`
}

type TxsdPostBox struct {
	XsdGoPkgHasElems_AddressLine

//	Specification of the number of a postbox
	XsdGoPkgHasElems_PostBoxNumber_TxsdPostBoxSequencePostBoxNumber_

//	Specification of the prefix of the post box number. eg. A in POBox:A-123
	XsdGoPkgHasElems_PostBoxNumberPrefix_TxsdPostBoxSequencePostBoxNumberPrefix_

//	Specification of the suffix of the post box number. eg. A in POBox:123A
	XsdGoPkgHasElems_PostBoxNumberSuffix_TxsdPostBoxSequencePostBoxNumberSuffix_

//	Some countries like USA have POBox as 12345-123
	XsdGoPkgHasElems_PostBoxNumberExtension_TxsdPostBoxSequencePostBoxNumberExtension_

	XsdGoPkgHasElems_PostalCode

}

//	Specification of a postbox like mail delivery point. Only a single postbox number can be specified. Examples of postboxes are POBox, free mail numbers, etc.
type XsdGoPkgHasElems_PostBox struct {
//	Specification of a postbox like mail delivery point. Only a single postbox number can be specified. Examples of postboxes are POBox, free mail numbers, etc.
	PostBoxs []*TxsdPostBox `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostBox"`
}

//	Specification of a postbox like mail delivery point. Only a single postbox number can be specified. Examples of postboxes are POBox, free mail numbers, etc.
type XsdGoPkgHasElem_PostBox struct {
//	Specification of a postbox like mail delivery point. Only a single postbox number can be specified. Examples of postboxes are POBox, free mail numbers, etc.
	PostBox *TxsdPostBox `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PostBox"`
}

type TxsdDepartmentSequenceDepartmentName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Specification of the name of a department.
type XsdGoPkgHasElems_DepartmentName_TxsdDepartmentSequenceDepartmentName_ struct {
//	Specification of the name of a department.
	DepartmentNames []*TxsdDepartmentSequenceDepartmentName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DepartmentName"`
}

//	Specification of the name of a department.
type XsdGoPkgHasElem_DepartmentName_TxsdDepartmentSequenceDepartmentName_ struct {
//	Specification of the name of a department.
	DepartmentName *TxsdDepartmentSequenceDepartmentName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 DepartmentName"`
}

type TxsdDepartment struct {
	XsdGoPkgHasElems_AddressLine

//	Specification of the name of a department.
	XsdGoPkgHasElems_DepartmentName_TxsdDepartmentSequenceDepartmentName_

	XsdGoPkgHasElems_PostalCode

}

//	Subdivision in the firm: School of Physics at Victoria University (School of Physics is the department)
type XsdGoPkgHasElem_Department struct {
//	Subdivision in the firm: School of Physics at Victoria University (School of Physics is the department)
	Department *TxsdDepartment `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Department"`
}

//	Subdivision in the firm: School of Physics at Victoria University (School of Physics is the department)
type XsdGoPkgHasElems_Department struct {
//	Subdivision in the firm: School of Physics at Victoria University (School of Physics is the department)
	Departments []*TxsdDepartment `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Department"`
}

//	STREET, PREMISE, SUBPREMISE, PARK, FARM, etc
type XsdGoPkgHasAttr_PremiseDependency_XsdtString_ struct {
//	STREET, PREMISE, SUBPREMISE, PARK, FARM, etc
	PremiseDependency xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseDependency,attr"`
}

//	NEAR, ADJACENT TO, etc
type XsdGoPkgHasAttr_PremiseDependencyType_XsdtString_ struct {
//	NEAR, ADJACENT TO, etc
	PremiseDependencyType xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseDependencyType,attr"`
}

//	DES, DE, LA, LA, DU in RUE DU BOIS. These terms connect a premise/thoroughfare type and premise/thoroughfare name. Terms may appear with names AVE DU BOIS
type XsdGoPkgHasAttr_PremiseThoroughfareConnector_XsdtString_ struct {
//	DES, DE, LA, LA, DU in RUE DU BOIS. These terms connect a premise/thoroughfare type and premise/thoroughfare name. Terms may appear with names AVE DU BOIS
	PremiseThoroughfareConnector xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseThoroughfareConnector,attr"`
}

//	Eg. Odd or even number range
type XsdGoPkgHasAttr_RangeType_XsdtString_ struct {
//	Eg. Odd or even number range
	RangeType xsdt.String `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 RangeType,attr"`
}

type TxsdPremiseSequenceChoiceChoicePremiseNumberRangeIndicatorOccurence xsdt.Nmtoken

//	Since TxsdPremiseSequenceChoiceChoicePremiseNumberRangeIndicatorOccurence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPremiseSequenceChoiceChoicePremiseNumberRangeIndicatorOccurence) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdPremiseSequenceChoiceChoicePremiseNumberRangeIndicatorOccurence is just a simple String type, this merely returns the current string value.
func (me TxsdPremiseSequenceChoiceChoicePremiseNumberRangeIndicatorOccurence) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdPremiseSequenceChoiceChoicePremiseNumberRangeIndicatorOccurence's alias type xsdt.Nmtoken
func (me TxsdPremiseSequenceChoiceChoicePremiseNumberRangeIndicatorOccurence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdPremiseSequenceChoiceChoicePremiseNumberRangeIndicatorOccurence is "Before".
func (me TxsdPremiseSequenceChoiceChoicePremiseNumberRangeIndicatorOccurence) IsBefore () bool { return me == "Before" }

//	Returns true if the value of this enumerated TxsdPremiseSequenceChoiceChoicePremiseNumberRangeIndicatorOccurence is "After".
func (me TxsdPremiseSequenceChoiceChoicePremiseNumberRangeIndicatorOccurence) IsAfter () bool { return me == "After" }

//	No.12-14 where "No." is before actual street number
type XsdGoPkgHasAttr_IndicatorOccurence_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeIndicatorOccurence_ struct {
//	No.12-14 where "No." is before actual street number
	IndicatorOccurence TxsdPremiseSequenceChoiceChoicePremiseNumberRangeIndicatorOccurence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 IndicatorOccurence,attr"`
}

type TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence xsdt.Nmtoken

//	Since TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence is just a simple String type, this merely returns the current string value.
func (me TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence's alias type xsdt.Nmtoken
func (me TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence is "BeforeName".
func (me TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence) IsBeforeName () bool { return me == "BeforeName" }

//	Returns true if the value of this enumerated TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence is "AfterName".
func (me TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence) IsAfterName () bool { return me == "AfterName" }

//	Returns true if the value of this enumerated TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence is "BeforeType".
func (me TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence) IsBeforeType () bool { return me == "BeforeType" }

//	Returns true if the value of this enumerated TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence is "AfterType".
func (me TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence) IsAfterType () bool { return me == "AfterType" }

//	Building 23-25 where the number occurs after building name
type XsdGoPkgHasAttr_NumberRangeOccurence_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence_ struct {
//	Building 23-25 where the number occurs after building name
	NumberRangeOccurence TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberRangeOccurence,attr"`
}

type TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeFrom struct {
	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElems_PremiseNumberPrefix

	XsdGoPkgHasElems_PremiseNumber

	XsdGoPkgHasElems_PremiseNumberSuffix

}

//	Start number details of the premise number range
type XsdGoPkgHasElem_PremiseNumberRangeFrom_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeFrom_ struct {
//	Start number details of the premise number range
	PremiseNumberRangeFrom *TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeFrom `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberRangeFrom"`
}

//	Start number details of the premise number range
type XsdGoPkgHasElems_PremiseNumberRangeFrom_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeFrom_ struct {
//	Start number details of the premise number range
	PremiseNumberRangeFroms []*TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeFrom `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberRangeFrom"`
}

type TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeTo struct {
	XsdGoPkgHasElems_AddressLine

	XsdGoPkgHasElems_PremiseNumberPrefix

	XsdGoPkgHasElems_PremiseNumber

	XsdGoPkgHasElems_PremiseNumberSuffix

}

//	End number details of the premise number range
type XsdGoPkgHasElem_PremiseNumberRangeTo_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeTo_ struct {
//	End number details of the premise number range
	PremiseNumberRangeTo *TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeTo `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberRangeTo"`
}

//	End number details of the premise number range
type XsdGoPkgHasElems_PremiseNumberRangeTo_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeTo_ struct {
//	End number details of the premise number range
	PremiseNumberRangeTos []*TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeTo `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberRangeTo"`
}

type TxsdPremiseSequenceChoiceChoicePremiseNumberRange struct {
//	Start number details of the premise number range
	XsdGoPkgHasElems_PremiseNumberRangeFrom_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeFrom_

//	End number details of the premise number range
	XsdGoPkgHasElems_PremiseNumberRangeTo_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeSequencePremiseNumberRangeTo_

//	Eg. Odd or even number range
	XsdGoPkgHasAttr_RangeType_XsdtString_

//	No.12-14 where "No." is before actual street number
	XsdGoPkgHasAttr_IndicatorOccurence_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeIndicatorOccurence_

//	Building 23-25 where the number occurs after building name
	XsdGoPkgHasAttr_NumberRangeOccurence_TxsdPremiseSequenceChoiceChoicePremiseNumberRangeNumberRangeOccurence_

}

//	Specification for defining the premise number range. Some premises have number as Building C1-C7
type XsdGoPkgHasElems_PremiseNumberRange_TxsdPremiseSequenceChoiceChoicePremiseNumberRange_ struct {
//	Specification for defining the premise number range. Some premises have number as Building C1-C7
	PremiseNumberRanges []*TxsdPremiseSequenceChoiceChoicePremiseNumberRange `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberRange"`
}

//	Specification for defining the premise number range. Some premises have number as Building C1-C7
type XsdGoPkgHasElem_PremiseNumberRange_TxsdPremiseSequenceChoiceChoicePremiseNumberRange_ struct {
//	Specification for defining the premise number range. Some premises have number as Building C1-C7
	PremiseNumberRange *TxsdPremiseSequenceChoiceChoicePremiseNumberRange `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberRange"`
}

type TxsdPremiseSequenceChoicePremiseLocation struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	LOBBY, BASEMENT, GROUND FLOOR, etc...
type XsdGoPkgHasElems_PremiseLocation_TxsdPremiseSequenceChoicePremiseLocation_ struct {
//	LOBBY, BASEMENT, GROUND FLOOR, etc...
	PremiseLocations []*TxsdPremiseSequenceChoicePremiseLocation `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseLocation"`
}

//	LOBBY, BASEMENT, GROUND FLOOR, etc...
type XsdGoPkgHasElem_PremiseLocation_TxsdPremiseSequenceChoicePremiseLocation_ struct {
//	LOBBY, BASEMENT, GROUND FLOOR, etc...
	PremiseLocation *TxsdPremiseSequenceChoicePremiseLocation `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseLocation"`
}

type TxsdPremiseSequencePremiseNameTypeOccurrence xsdt.Nmtoken

//	Since TxsdPremiseSequencePremiseNameTypeOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPremiseSequencePremiseNameTypeOccurrence) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdPremiseSequencePremiseNameTypeOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdPremiseSequencePremiseNameTypeOccurrence) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdPremiseSequencePremiseNameTypeOccurrence's alias type xsdt.Nmtoken
func (me TxsdPremiseSequencePremiseNameTypeOccurrence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdPremiseSequencePremiseNameTypeOccurrence is "Before".
func (me TxsdPremiseSequencePremiseNameTypeOccurrence) IsBefore () bool { return me == "Before" }

//	Returns true if the value of this enumerated TxsdPremiseSequencePremiseNameTypeOccurrence is "After".
func (me TxsdPremiseSequencePremiseNameTypeOccurrence) IsAfter () bool { return me == "After" }

//	EGIS Building where EGIS occurs before Building, DES JARDINS occurs after COMPLEXE DES JARDINS
type XsdGoPkgHasAttr_TypeOccurrence_TxsdPremiseSequencePremiseNameTypeOccurrence_ struct {
//	EGIS Building where EGIS occurs before Building, DES JARDINS occurs after COMPLEXE DES JARDINS
	TypeOccurrence TxsdPremiseSequencePremiseNameTypeOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 TypeOccurrence,attr"`
}

type TxsdPremiseSequencePremiseName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	EGIS Building where EGIS occurs before Building, DES JARDINS occurs after COMPLEXE DES JARDINS
	XsdGoPkgHasAttr_TypeOccurrence_TxsdPremiseSequencePremiseNameTypeOccurrence_

}

//	Specification of the name of the premise (house, building, park, farm, etc). A premise name is specified when the premise cannot be addressed using a street name plus premise (house) number.
type XsdGoPkgHasElems_PremiseName_TxsdPremiseSequencePremiseName_ struct {
//	Specification of the name of the premise (house, building, park, farm, etc). A premise name is specified when the premise cannot be addressed using a street name plus premise (house) number.
	PremiseNames []*TxsdPremiseSequencePremiseName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseName"`
}

//	Specification of the name of the premise (house, building, park, farm, etc). A premise name is specified when the premise cannot be addressed using a street name plus premise (house) number.
type XsdGoPkgHasElem_PremiseName_TxsdPremiseSequencePremiseName_ struct {
//	Specification of the name of the premise (house, building, park, farm, etc). A premise name is specified when the premise cannot be addressed using a street name plus premise (house) number.
	PremiseName *TxsdPremiseSequencePremiseName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseName"`
}

type TxsdPremise struct {
//	LOBBY, BASEMENT, GROUND FLOOR, etc...
	XsdGoPkgHasElems_PremiseLocation_TxsdPremiseSequenceChoicePremiseLocation_

	XsdGoPkgHasElems_PremiseNumber

//	Specification for defining the premise number range. Some premises have number as Building C1-C7
	XsdGoPkgHasElems_PremiseNumberRange_TxsdPremiseSequenceChoiceChoicePremiseNumberRange_

	XsdGoPkgHasElems_AddressLine

//	Specification of the name of the premise (house, building, park, farm, etc). A premise name is specified when the premise cannot be addressed using a street name plus premise (house) number.
	XsdGoPkgHasElems_PremiseName_TxsdPremiseSequencePremiseName_

	XsdGoPkgHasElems_PremiseNumberPrefix

	XsdGoPkgHasElems_PremiseNumberSuffix

	XsdGoPkgHasElems_PostalCode

	XsdGoPkgHasElems_Premise

//	DES, DE, LA, LA, DU in RUE DU BOIS. These terms connect a premise/thoroughfare type and premise/thoroughfare name. Terms may appear with names AVE DU BOIS
	XsdGoPkgHasAttr_PremiseThoroughfareConnector_XsdtString_

//	STREET, PREMISE, SUBPREMISE, PARK, FARM, etc
	XsdGoPkgHasAttr_PremiseDependency_XsdtString_

//	NEAR, ADJACENT TO, etc
	XsdGoPkgHasAttr_PremiseDependencyType_XsdtString_

}

//	Specification of a single premise, for example a house or a building. The premise as a whole has a unique premise (house) number or a premise name.  There could be more than
//	one premise in a street referenced in an address. For example a building address near a major shopping centre or raiwlay station
type XsdGoPkgHasElem_Premise struct {
//	Specification of a single premise, for example a house or a building. The premise as a whole has a unique premise (house) number or a premise name.  There could be more than
//	one premise in a street referenced in an address. For example a building address near a major shopping centre or raiwlay station
	Premise *TxsdPremise `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Premise"`
}

//	Specification of a single premise, for example a house or a building. The premise as a whole has a unique premise (house) number or a premise name.  There could be more than
//	one premise in a street referenced in an address. For example a building address near a major shopping centre or raiwlay station
type XsdGoPkgHasElems_Premise struct {
//	Specification of a single premise, for example a house or a building. The premise as a whole has a unique premise (house) number or a premise name.  There could be more than
//	one premise in a street referenced in an address. For example a building address near a major shopping centre or raiwlay station
	Premises []*TxsdPremise `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 Premise"`
}

//	A-12 where 12 is number and A is prefix and "-" is the separator
type TxsdThoroughfareNumberPrefix struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Prefix before the number. A in A12 Archer Street
type XsdGoPkgHasElems_ThoroughfareNumberPrefix struct {
//	Prefix before the number. A in A12 Archer Street
	ThoroughfareNumberPrefixs []*TxsdThoroughfareNumberPrefix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberPrefix"`
}

//	Prefix before the number. A in A12 Archer Street
type XsdGoPkgHasElem_ThoroughfareNumberPrefix struct {
//	Prefix before the number. A in A12 Archer Street
	ThoroughfareNumberPrefix *TxsdThoroughfareNumberPrefix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberPrefix"`
}

type TxsdThoroughfareNumberSuffix struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Suffix after the number. A in 12A Archer Street
type XsdGoPkgHasElems_ThoroughfareNumberSuffix struct {
//	Suffix after the number. A in 12A Archer Street
	ThoroughfareNumberSuffixs []*TxsdThoroughfareNumberSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberSuffix"`
}

//	Suffix after the number. A in 12A Archer Street
type XsdGoPkgHasElem_ThoroughfareNumberSuffix struct {
//	Suffix after the number. A in 12A Archer Street
	ThoroughfareNumberSuffix *TxsdThoroughfareNumberSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumberSuffix"`
}

type TxsdThoroughfareNumberNumberType xsdt.Nmtoken

//	Since TxsdThoroughfareNumberNumberType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdThoroughfareNumberNumberType) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdThoroughfareNumberNumberType is just a simple String type, this merely returns the current string value.
func (me TxsdThoroughfareNumberNumberType) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdThoroughfareNumberNumberType's alias type xsdt.Nmtoken
func (me TxsdThoroughfareNumberNumberType) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdThoroughfareNumberNumberType is "Single".
func (me TxsdThoroughfareNumberNumberType) IsSingle () bool { return me == "Single" }

//	Returns true if the value of this enumerated TxsdThoroughfareNumberNumberType is "Range".
func (me TxsdThoroughfareNumberNumberType) IsRange () bool { return me == "Range" }

//	12 Archer Street is "Single" and 12-14 Archer Street is "Range"
type XsdGoPkgHasAttr_NumberType_TxsdThoroughfareNumberNumberType_ struct {
//	12 Archer Street is "Single" and 12-14 Archer Street is "Range"
	NumberType TxsdThoroughfareNumberNumberType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberType,attr"`
}

type TxsdThoroughfareNumberIndicatorOccurrence xsdt.Nmtoken

//	Since TxsdThoroughfareNumberIndicatorOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdThoroughfareNumberIndicatorOccurrence) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdThoroughfareNumberIndicatorOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdThoroughfareNumberIndicatorOccurrence) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdThoroughfareNumberIndicatorOccurrence's alias type xsdt.Nmtoken
func (me TxsdThoroughfareNumberIndicatorOccurrence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdThoroughfareNumberIndicatorOccurrence is "Before".
func (me TxsdThoroughfareNumberIndicatorOccurrence) IsBefore () bool { return me == "Before" }

//	Returns true if the value of this enumerated TxsdThoroughfareNumberIndicatorOccurrence is "After".
func (me TxsdThoroughfareNumberIndicatorOccurrence) IsAfter () bool { return me == "After" }

//	No.12 where "No." is before actual street number
type XsdGoPkgHasAttr_IndicatorOccurrence_TxsdThoroughfareNumberIndicatorOccurrence_ struct {
//	No.12 where "No." is before actual street number
	IndicatorOccurrence TxsdThoroughfareNumberIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 IndicatorOccurrence,attr"`
}

type TxsdThoroughfareNumberNumberOccurrence xsdt.Nmtoken

//	Since TxsdThoroughfareNumberNumberOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdThoroughfareNumberNumberOccurrence) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdThoroughfareNumberNumberOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdThoroughfareNumberNumberOccurrence) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdThoroughfareNumberNumberOccurrence's alias type xsdt.Nmtoken
func (me TxsdThoroughfareNumberNumberOccurrence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdThoroughfareNumberNumberOccurrence is "BeforeName".
func (me TxsdThoroughfareNumberNumberOccurrence) IsBeforeName () bool { return me == "BeforeName" }

//	Returns true if the value of this enumerated TxsdThoroughfareNumberNumberOccurrence is "AfterName".
func (me TxsdThoroughfareNumberNumberOccurrence) IsAfterName () bool { return me == "AfterName" }

//	Returns true if the value of this enumerated TxsdThoroughfareNumberNumberOccurrence is "BeforeType".
func (me TxsdThoroughfareNumberNumberOccurrence) IsBeforeType () bool { return me == "BeforeType" }

//	Returns true if the value of this enumerated TxsdThoroughfareNumberNumberOccurrence is "AfterType".
func (me TxsdThoroughfareNumberNumberOccurrence) IsAfterType () bool { return me == "AfterType" }

//	23 Archer St, Archer Street 23, St Archer 23
type XsdGoPkgHasAttr_NumberOccurrence_TxsdThoroughfareNumberNumberOccurrence_ struct {
//	23 Archer St, Archer Street 23, St Archer 23
	NumberOccurrence TxsdThoroughfareNumberNumberOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberOccurrence,attr"`
}

type TxsdThoroughfareNumber struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	12 Archer Street is "Single" and 12-14 Archer Street is "Range"
	XsdGoPkgHasAttr_NumberType_TxsdThoroughfareNumberNumberType_

//	No.12 where "No." is before actual street number
	XsdGoPkgHasAttr_IndicatorOccurrence_TxsdThoroughfareNumberIndicatorOccurrence_

//	23 Archer St, Archer Street 23, St Archer 23
	XsdGoPkgHasAttr_NumberOccurrence_TxsdThoroughfareNumberNumberOccurrence_

}

//	Eg.: 23 Archer street or 25/15 Zero Avenue, etc
type XsdGoPkgHasElems_ThoroughfareNumber struct {
//	Eg.: 23 Archer street or 25/15 Zero Avenue, etc
	ThoroughfareNumbers []*TxsdThoroughfareNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumber"`
}

//	Eg.: 23 Archer street or 25/15 Zero Avenue, etc
type XsdGoPkgHasElem_ThoroughfareNumber struct {
//	Eg.: 23 Archer street or 25/15 Zero Avenue, etc
	ThoroughfareNumber *TxsdThoroughfareNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 ThoroughfareNumber"`
}

type TxsdPremiseNumberNumberType xsdt.Nmtoken

//	Since TxsdPremiseNumberNumberType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPremiseNumberNumberType) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdPremiseNumberNumberType is just a simple String type, this merely returns the current string value.
func (me TxsdPremiseNumberNumberType) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdPremiseNumberNumberType's alias type xsdt.Nmtoken
func (me TxsdPremiseNumberNumberType) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdPremiseNumberNumberType is "Single".
func (me TxsdPremiseNumberNumberType) IsSingle () bool { return me == "Single" }

//	Returns true if the value of this enumerated TxsdPremiseNumberNumberType is "Range".
func (me TxsdPremiseNumberNumberType) IsRange () bool { return me == "Range" }

//	Building 12-14 is "Range" and Building 12 is "Single"
type XsdGoPkgHasAttr_NumberType_TxsdPremiseNumberNumberType_ struct {
//	Building 12-14 is "Range" and Building 12 is "Single"
	NumberType TxsdPremiseNumberNumberType `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberType,attr"`
}

type TxsdPremiseNumberIndicatorOccurrence xsdt.Nmtoken

//	Since TxsdPremiseNumberIndicatorOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPremiseNumberIndicatorOccurrence) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdPremiseNumberIndicatorOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdPremiseNumberIndicatorOccurrence) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdPremiseNumberIndicatorOccurrence's alias type xsdt.Nmtoken
func (me TxsdPremiseNumberIndicatorOccurrence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdPremiseNumberIndicatorOccurrence is "Before".
func (me TxsdPremiseNumberIndicatorOccurrence) IsBefore () bool { return me == "Before" }

//	Returns true if the value of this enumerated TxsdPremiseNumberIndicatorOccurrence is "After".
func (me TxsdPremiseNumberIndicatorOccurrence) IsAfter () bool { return me == "After" }

//	No. occurs before 12 No.12
type XsdGoPkgHasAttr_IndicatorOccurrence_TxsdPremiseNumberIndicatorOccurrence_ struct {
//	No. occurs before 12 No.12
	IndicatorOccurrence TxsdPremiseNumberIndicatorOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 IndicatorOccurrence,attr"`
}

type TxsdPremiseNumberNumberTypeOccurrence xsdt.Nmtoken

//	Since TxsdPremiseNumberNumberTypeOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPremiseNumberNumberTypeOccurrence) SetFromString (s string) { (*xsdt.Nmtoken)(me).SetFromString(s) }

//	Since TxsdPremiseNumberNumberTypeOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdPremiseNumberNumberTypeOccurrence) String () string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdPremiseNumberNumberTypeOccurrence's alias type xsdt.Nmtoken
func (me TxsdPremiseNumberNumberTypeOccurrence) ToXsdtNmtoken () xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdPremiseNumberNumberTypeOccurrence is "Before".
func (me TxsdPremiseNumberNumberTypeOccurrence) IsBefore () bool { return me == "Before" }

//	Returns true if the value of this enumerated TxsdPremiseNumberNumberTypeOccurrence is "After".
func (me TxsdPremiseNumberNumberTypeOccurrence) IsAfter () bool { return me == "After" }

//	12 in BUILDING 12 occurs "after" premise type BUILDING
type XsdGoPkgHasAttr_NumberTypeOccurrence_TxsdPremiseNumberNumberTypeOccurrence_ struct {
//	12 in BUILDING 12 occurs "after" premise type BUILDING
	NumberTypeOccurrence TxsdPremiseNumberNumberTypeOccurrence `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 NumberTypeOccurrence,attr"`
}

type TxsdPremiseNumber struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

//	12 in BUILDING 12 occurs "after" premise type BUILDING
	XsdGoPkgHasAttr_NumberTypeOccurrence_TxsdPremiseNumberNumberTypeOccurrence_

//	No. occurs before 12 No.12
	XsdGoPkgHasAttr_IndicatorOccurrence_TxsdPremiseNumberIndicatorOccurrence_

//	Building 12-14 is "Range" and Building 12 is "Single"
	XsdGoPkgHasAttr_NumberType_TxsdPremiseNumberNumberType_

}

//	Specification of the identifier of the premise (house, building, etc). Premises in a street are often uniquely identified by means of consecutive identifiers. The identifier can be a number, a letter or any combination of the two.
type XsdGoPkgHasElems_PremiseNumber struct {
//	Specification of the identifier of the premise (house, building, etc). Premises in a street are often uniquely identified by means of consecutive identifiers. The identifier can be a number, a letter or any combination of the two.
	PremiseNumbers []*TxsdPremiseNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumber"`
}

//	Specification of the identifier of the premise (house, building, etc). Premises in a street are often uniquely identified by means of consecutive identifiers. The identifier can be a number, a letter or any combination of the two.
type XsdGoPkgHasElem_PremiseNumber struct {
//	Specification of the identifier of the premise (house, building, etc). Premises in a street are often uniquely identified by means of consecutive identifiers. The identifier can be a number, a letter or any combination of the two.
	PremiseNumber *TxsdPremiseNumber `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumber"`
}

type TxsdPremiseNumberPrefix struct {
	XsdGoPkgValue xsdt.String `xml:",chardata"`

	XsdGoPkgHasAtts_GrPostal

}

//	A in A12
type XsdGoPkgHasElems_PremiseNumberPrefix struct {
//	A in A12
	PremiseNumberPrefixs []*TxsdPremiseNumberPrefix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberPrefix"`
}

//	A in A12
type XsdGoPkgHasElem_PremiseNumberPrefix struct {
//	A in A12
	PremiseNumberPrefix *TxsdPremiseNumberPrefix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberPrefix"`
}

type TxsdPremiseNumberSuffix struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	A in 12A
type XsdGoPkgHasElems_PremiseNumberSuffix struct {
//	A in 12A
	PremiseNumberSuffixs []*TxsdPremiseNumberSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberSuffix"`
}

//	A in 12A
type XsdGoPkgHasElem_PremiseNumberSuffix struct {
//	A in 12A
	PremiseNumberSuffix *TxsdPremiseNumberSuffix `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 PremiseNumberSuffix"`
}

type TxsdCountryName struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAtts_GrPostal

}

//	Specification of the name of a country.
type XsdGoPkgHasElems_CountryName struct {
//	Specification of the name of a country.
	CountryNames []*TxsdCountryName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 CountryName"`
}

//	Specification of the name of a country.
type XsdGoPkgHasElem_CountryName struct {
//	Specification of the name of a country.
	CountryName *TxsdCountryName `xml:"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0 CountryName"`
}
